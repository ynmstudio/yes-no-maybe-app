import * as functions from "firebase-functions";
import * as admin from "firebase-admin";

const axios = require("axios").default;
// const coconut = require("coconutjs");

admin.initializeApp();

// exports.processEmailVerified = functions.region("europe-west3").auth.user().

// On sign up.
exports.processSignUp = functions
  .region("europe-west3") // check https://firebase.google.com/docs/functions/locations to set region as needed
  .auth.user()
  .onCreate((user) => {
    let role = "user";

    if (
      (user.email &&
        user.email.endsWith(
          functions.config().hasura.team_role_email_domain
        )) ||
      (user.email && user.email.endsWith(functions.config().hasura.admin_email))
    ) {
      role = "team";
    }

    const customClaims = {
      role: role,
      "https://hasura.io/jwt/claims": {
        "x-hasura-default-role": role,
        "x-hasura-allowed-roles": [role],
        "x-hasura-user-id": user.uid,
      },
    };

    return admin
      .auth()
      .setCustomUserClaims(user.uid, customClaims)
      .then(() => {
        // Update real-time database to notify client to force refresh.
        const metadataRef = admin.database().ref("metadata/" + user.uid);
        // Set the refresh time to the current UTC timestamp.
        // This will be captured on the client to force a token refresh.
        return metadataRef.set({ refreshTime: new Date().getTime() });
      })
      .catch((error) => {
        return functions.logger.error(error);
      });
  });

exports.deleteFile = functions
  .region("europe-west3")
  .https.onRequest((req, res) => {
    if (req.method !== "POST") {
      res.status(400).send("Please send a POST request");
      return;
    }
    if (
      req.get("x-hasura-shared-secret") !==
      functions.config().hasura.shared_secret
    ) {
      res.status(401).send("Unauthorized");
      return;
    }

    if (req.body.event.op !== "DELETE") {
      res.status(405).send(`Method ${req.body.event.op} not allowed`);
      return;
    }

    const key = req.body.event.data.old.key;

    if (!key) {
      res.status(400).send("Payload does not contain a file key");
      return;
    }

    const bucket = admin
      .storage()
      .bucket(functions.config().storage?.dev_bucket);

    bucket
      .deleteFiles({ prefix: key })
      .then(() => {
        functions.logger.log(`file deleted with key: ${key}`);
        res
          .status(200)
          .send(
            `Successfully deleted file '${req.body.event.data.old.originalname}'.`
          );
        return;
      })
      .catch((err) => {
        functions.logger.log(`Failed to remove file, error: ${err}`);
        res.status(404).send(`Failed to remove file, error: ${err}`);
        return;
      });
  });

exports.convertVideos = functions
  .region("europe-west3")
  .storage.bucket(functions.config().storage?.dev_bucket)
  .object()
  .onFinalize(async (object) => {
    const contentType = object.contentType; // File content type.

    if (contentType?.startsWith("video/")) {
      const path = require("path");
      const bucket = admin
        .storage()
        .bucket(functions.config().storage?.dev_bucket);
      const file = bucket.file(object.name || "");

      if (!file) {
        return functions.logger.error("No file found.");
      }

      const options = {
        action: "read" as any,
        expires: Date.now() + 1000 * 60 * 10,
      };
      const source = (await file.getSignedUrl(options))[0];

      // Config generated by coconut.co

      // Variables
      const api_key = functions.config().coconut.api_key;
      const access_key = functions.config().coconut.access_key;
      const secret_key = functions.config().coconut.secret_key;
      // const cdn = `s3://${access_key}:${secret_key}@${object.bucket}`;

      const webhook = functions.config().coconut.webhook;

      const fullpath = object.name;

      const filePath = path.dirname(fullpath); // File path in the bucket.

      if (fullpath?.includes("_converted")) {
        return functions.logger.log("Already converted");
      }

      const fileName = path.basename(fullpath); // Get the file name.

      // const metageneration = object.metageneration; // Number of times metadata has been generated. New objects have a value of 1.
      try {
        const { data } = await axios.post(
          "https://api.coconut.co/v2/jobs",
          {
            input: {
              url: source,
            },
            storage: {
              service: "gcs",
              region: "europe-west3",
              bucket: object.bucket,
              credentials: {
                access_key_id: access_key,
                secret_access_key: secret_key,
              },
            },
            notification: {
              type: "http",
              url: webhook,
            },
            outputs: {
              jpg: {
                path: `/${filePath}/${fileName}.jpg`,
              },
              "gif:320x": {
                key: "gif:preview",
                path: `/${filePath}/${fileName}_preview.gif`,
                scene: {
                  number: 3,
                  duration: 1,
                },
              },
              mp4: {
                path: `/${filePath}/${fileName}_converted.mp4`,
              },
              webm: {
                path: `/${filePath}/${fileName}_converted.webm`,
              },
            },
          },
          {
            auth: {
              username: api_key,
              password: "",
            },
          }
        );

        functions.logger.log(JSON.stringify(data));

        const metadata = {
          metadata: {
            coconut_id: data.id,
          },
        };

        const updatedMetadata = await file.setMetadata(metadata);
        return functions.logger.log(updatedMetadata[0]);

        // coconut.createJob(
        //   {
        //     api_key,
        //     source,
        //     webhook,
        //     outputs: {
        //       jpg: `${cdn}/${filePath}/${fileName}_#num#.jpg, number=3`,
        //       mp4: `${cdn}/${filePath}/${fileName}_converted.mp4`,
        //       webm: `${cdn}/${filePath}/${fileName}_converted.webm`,
        //     },
        //   },
        //   (job: any) => {
        //     return functions.logger.log(`Job ${job.id} started at ${job.created_at}`);
        //   }
        // );
      } catch (error) {
        functions.logger.error(error.response.data);
        functions.logger.error(error.response.status);
        functions.logger.error(error.response.headers);
        functions.logger.error(JSON.stringify(error.response.data));
        return functions.logger.error(error);
      }
    }
    return;
  });
