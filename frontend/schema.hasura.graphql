# source: http://localhost:8080/v1/graphql
# timestamp: Wed Mar 03 2021 14:45:13 GMT+0100 (GMT+01:00)

schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
columns and relationships of "applications"
"""
type applications {
  created_at: timestamptz!
  created_by: String!
  database: Boolean!
  disclaimer: Boolean!

  """An object relationship"""
  edition: editions!
  edition_id: Int!
  eliminated: Boolean!

  """An object relationship"""
  elimination: eliminations

  """An array relationship"""
  files(
    """distinct select on columns"""
    distinct_on: [work_files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_files_order_by!]

    """filter the rows returned"""
    where: work_files_bool_exp
  ): [work_files!]!

  """An aggregated array relationship"""
  files_aggregate(
    """distinct select on columns"""
    distinct_on: [work_files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_files_order_by!]

    """filter the rows returned"""
    where: work_files_bool_exp
  ): work_files_aggregate!
  group: Boolean!
  id: uuid!
  internal_name: String
  locked: Boolean!

  """An array relationship"""
  messages(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]

    """filter the rows returned"""
    where: messages_bool_exp
  ): [messages!]!

  """An aggregated array relationship"""
  messages_aggregate(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]

    """filter the rows returned"""
    where: messages_bool_exp
  ): messages_aggregate!
  name: String

  """An object relationship"""
  payment: payments

  """
  A computed field, executes function "application_rated_by_user"
  """
  rated_by_user: Boolean

  """An array relationship"""
  ratings(
    """distinct select on columns"""
    distinct_on: [ratings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ratings_order_by!]

    """filter the rows returned"""
    where: ratings_bool_exp
  ): [ratings!]!

  """An aggregated array relationship"""
  ratings_aggregate(
    """distinct select on columns"""
    distinct_on: [ratings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ratings_order_by!]

    """filter the rows returned"""
    where: ratings_bool_exp
  ): ratings_aggregate!

  """
  A computed field, executes function "application_is_ready"
  """
  ready: Boolean
  residency: Boolean!

  """An array relationship"""
  specifications(
    """distinct select on columns"""
    distinct_on: [work_specifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specifications_order_by!]

    """filter the rows returned"""
    where: work_specifications_bool_exp
  ): [work_specifications!]!

  """An aggregated array relationship"""
  specifications_aggregate(
    """distinct select on columns"""
    distinct_on: [work_specifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specifications_order_by!]

    """filter the rows returned"""
    where: work_specifications_bool_exp
  ): work_specifications_aggregate!

  """
  A computed field, executes function "application_state"
  """
  state: String
  statement: String
  updated_at: timestamptz!

  """An object relationship"""
  user: users!

  """
  A computed field, executes function "application_is_winner"
  """
  winner: Boolean

  """An array relationship"""
  works(
    """distinct select on columns"""
    distinct_on: [works_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [works_order_by!]

    """filter the rows returned"""
    where: works_bool_exp
  ): [works!]!

  """An aggregated array relationship"""
  works_aggregate(
    """distinct select on columns"""
    distinct_on: [works_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [works_order_by!]

    """filter the rows returned"""
    where: works_bool_exp
  ): works_aggregate!
}

"""
aggregated selection of "applications"
"""
type applications_aggregate {
  aggregate: applications_aggregate_fields
  nodes: [applications!]!
}

"""
aggregate fields of "applications"
"""
type applications_aggregate_fields {
  avg: applications_avg_fields
  count(columns: [applications_select_column!], distinct: Boolean): Int
  max: applications_max_fields
  min: applications_min_fields
  stddev: applications_stddev_fields
  stddev_pop: applications_stddev_pop_fields
  stddev_samp: applications_stddev_samp_fields
  sum: applications_sum_fields
  var_pop: applications_var_pop_fields
  var_samp: applications_var_samp_fields
  variance: applications_variance_fields
}

"""
order by aggregate values of table "applications"
"""
input applications_aggregate_order_by {
  avg: applications_avg_order_by
  count: order_by
  max: applications_max_order_by
  min: applications_min_order_by
  stddev: applications_stddev_order_by
  stddev_pop: applications_stddev_pop_order_by
  stddev_samp: applications_stddev_samp_order_by
  sum: applications_sum_order_by
  var_pop: applications_var_pop_order_by
  var_samp: applications_var_samp_order_by
  variance: applications_variance_order_by
}

"""
input type for inserting array relation for remote table "applications"
"""
input applications_arr_rel_insert_input {
  data: [applications_insert_input!]!
  on_conflict: applications_on_conflict
}

"""aggregate avg on columns"""
type applications_avg_fields {
  edition_id: Float
}

"""
order by avg() on columns of table "applications"
"""
input applications_avg_order_by {
  edition_id: order_by
}

"""
Boolean expression to filter rows from the table "applications". All fields are combined with a logical 'AND'.
"""
input applications_bool_exp {
  _and: [applications_bool_exp]
  _not: applications_bool_exp
  _or: [applications_bool_exp]
  created_at: timestamptz_comparison_exp
  created_by: String_comparison_exp
  database: Boolean_comparison_exp
  disclaimer: Boolean_comparison_exp
  edition: editions_bool_exp
  edition_id: Int_comparison_exp
  eliminated: Boolean_comparison_exp
  elimination: eliminations_bool_exp
  files: work_files_bool_exp
  group: Boolean_comparison_exp
  id: uuid_comparison_exp
  internal_name: String_comparison_exp
  locked: Boolean_comparison_exp
  messages: messages_bool_exp
  name: String_comparison_exp
  payment: payments_bool_exp
  ratings: ratings_bool_exp
  residency: Boolean_comparison_exp
  specifications: work_specifications_bool_exp
  statement: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  works: works_bool_exp
}

"""
unique or primary key constraints on table "applications"
"""
enum applications_constraint {
  """unique or primary key constraint"""
  applications_edition_id_internal_name_key

  """unique or primary key constraint"""
  applications_pkey
}

"""
input type for incrementing integer column in table "applications"
"""
input applications_inc_input {
  edition_id: Int
}

"""
input type for inserting data into table "applications"
"""
input applications_insert_input {
  created_at: timestamptz
  created_by: String
  database: Boolean
  disclaimer: Boolean
  edition: editions_obj_rel_insert_input
  edition_id: Int
  eliminated: Boolean
  elimination: eliminations_obj_rel_insert_input
  files: work_files_arr_rel_insert_input
  group: Boolean
  id: uuid
  internal_name: String
  locked: Boolean
  messages: messages_arr_rel_insert_input
  name: String
  payment: payments_obj_rel_insert_input
  ratings: ratings_arr_rel_insert_input
  residency: Boolean
  specifications: work_specifications_arr_rel_insert_input
  statement: String
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  works: works_arr_rel_insert_input
}

"""aggregate max on columns"""
type applications_max_fields {
  created_at: timestamptz
  created_by: String
  edition_id: Int
  id: uuid
  internal_name: String
  name: String
  statement: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "applications"
"""
input applications_max_order_by {
  created_at: order_by
  created_by: order_by
  edition_id: order_by
  id: order_by
  internal_name: order_by
  name: order_by
  statement: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type applications_min_fields {
  created_at: timestamptz
  created_by: String
  edition_id: Int
  id: uuid
  internal_name: String
  name: String
  statement: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "applications"
"""
input applications_min_order_by {
  created_at: order_by
  created_by: order_by
  edition_id: order_by
  id: order_by
  internal_name: order_by
  name: order_by
  statement: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "applications"
"""
type applications_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [applications!]!
}

"""
input type for inserting object relation for remote table "applications"
"""
input applications_obj_rel_insert_input {
  data: applications_insert_input!
  on_conflict: applications_on_conflict
}

"""
on conflict condition type for table "applications"
"""
input applications_on_conflict {
  constraint: applications_constraint!
  update_columns: [applications_update_column!]!
  where: applications_bool_exp
}

"""
ordering options when selecting data from "applications"
"""
input applications_order_by {
  created_at: order_by
  created_by: order_by
  database: order_by
  disclaimer: order_by
  edition: editions_order_by
  edition_id: order_by
  eliminated: order_by
  elimination: eliminations_order_by
  files_aggregate: work_files_aggregate_order_by
  group: order_by
  id: order_by
  internal_name: order_by
  locked: order_by
  messages_aggregate: messages_aggregate_order_by
  name: order_by
  payment: payments_order_by
  ratings_aggregate: ratings_aggregate_order_by
  residency: order_by
  specifications_aggregate: work_specifications_aggregate_order_by
  statement: order_by
  updated_at: order_by
  user: users_order_by
  works_aggregate: works_aggregate_order_by
}

"""
primary key columns input for table: "applications"
"""
input applications_pk_columns_input {
  id: uuid!
}

"""
select columns of table "applications"
"""
enum applications_select_column {
  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  database

  """column name"""
  disclaimer

  """column name"""
  edition_id

  """column name"""
  eliminated

  """column name"""
  group

  """column name"""
  id

  """column name"""
  internal_name

  """column name"""
  locked

  """column name"""
  name

  """column name"""
  residency

  """column name"""
  statement

  """column name"""
  updated_at
}

"""
input type for updating data in table "applications"
"""
input applications_set_input {
  created_at: timestamptz
  created_by: String
  database: Boolean
  disclaimer: Boolean
  edition_id: Int
  eliminated: Boolean
  group: Boolean
  id: uuid
  internal_name: String
  locked: Boolean
  name: String
  residency: Boolean
  statement: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type applications_stddev_fields {
  edition_id: Float
}

"""
order by stddev() on columns of table "applications"
"""
input applications_stddev_order_by {
  edition_id: order_by
}

"""aggregate stddev_pop on columns"""
type applications_stddev_pop_fields {
  edition_id: Float
}

"""
order by stddev_pop() on columns of table "applications"
"""
input applications_stddev_pop_order_by {
  edition_id: order_by
}

"""aggregate stddev_samp on columns"""
type applications_stddev_samp_fields {
  edition_id: Float
}

"""
order by stddev_samp() on columns of table "applications"
"""
input applications_stddev_samp_order_by {
  edition_id: order_by
}

"""aggregate sum on columns"""
type applications_sum_fields {
  edition_id: Int
}

"""
order by sum() on columns of table "applications"
"""
input applications_sum_order_by {
  edition_id: order_by
}

"""
update columns of table "applications"
"""
enum applications_update_column {
  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  database

  """column name"""
  disclaimer

  """column name"""
  edition_id

  """column name"""
  eliminated

  """column name"""
  group

  """column name"""
  id

  """column name"""
  internal_name

  """column name"""
  locked

  """column name"""
  name

  """column name"""
  residency

  """column name"""
  statement

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type applications_var_pop_fields {
  edition_id: Float
}

"""
order by var_pop() on columns of table "applications"
"""
input applications_var_pop_order_by {
  edition_id: order_by
}

"""aggregate var_samp on columns"""
type applications_var_samp_fields {
  edition_id: Float
}

"""
order by var_samp() on columns of table "applications"
"""
input applications_var_samp_order_by {
  edition_id: order_by
}

"""aggregate variance on columns"""
type applications_variance_fields {
  edition_id: Float
}

"""
order by variance() on columns of table "applications"
"""
input applications_variance_order_by {
  edition_id: order_by
}

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
columns and relationships of "category_mediums"
"""
type category_mediums {
  id: uuid!
  name_de: String!
  name_en: String!

  """An array relationship"""
  specifications(
    """distinct select on columns"""
    distinct_on: [work_specification_mediums_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specification_mediums_order_by!]

    """filter the rows returned"""
    where: work_specification_mediums_bool_exp
  ): [work_specification_mediums!]!

  """An aggregated array relationship"""
  specifications_aggregate(
    """distinct select on columns"""
    distinct_on: [work_specification_mediums_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specification_mediums_order_by!]

    """filter the rows returned"""
    where: work_specification_mediums_bool_exp
  ): work_specification_mediums_aggregate!
}

"""
aggregated selection of "category_mediums"
"""
type category_mediums_aggregate {
  aggregate: category_mediums_aggregate_fields
  nodes: [category_mediums!]!
}

"""
aggregate fields of "category_mediums"
"""
type category_mediums_aggregate_fields {
  count(columns: [category_mediums_select_column!], distinct: Boolean): Int
  max: category_mediums_max_fields
  min: category_mediums_min_fields
}

"""
order by aggregate values of table "category_mediums"
"""
input category_mediums_aggregate_order_by {
  count: order_by
  max: category_mediums_max_order_by
  min: category_mediums_min_order_by
}

"""
input type for inserting array relation for remote table "category_mediums"
"""
input category_mediums_arr_rel_insert_input {
  data: [category_mediums_insert_input!]!
  on_conflict: category_mediums_on_conflict
}

"""
Boolean expression to filter rows from the table "category_mediums". All fields are combined with a logical 'AND'.
"""
input category_mediums_bool_exp {
  _and: [category_mediums_bool_exp]
  _not: category_mediums_bool_exp
  _or: [category_mediums_bool_exp]
  id: uuid_comparison_exp
  name_de: String_comparison_exp
  name_en: String_comparison_exp
  specifications: work_specification_mediums_bool_exp
}

"""
unique or primary key constraints on table "category_mediums"
"""
enum category_mediums_constraint {
  """unique or primary key constraint"""
  category_mediums_name_de_key

  """unique or primary key constraint"""
  category_mediums_name_en_key

  """unique or primary key constraint"""
  category_mediums_pkey
}

"""
input type for inserting data into table "category_mediums"
"""
input category_mediums_insert_input {
  id: uuid
  name_de: String
  name_en: String
  specifications: work_specification_mediums_arr_rel_insert_input
}

"""aggregate max on columns"""
type category_mediums_max_fields {
  id: uuid
  name_de: String
  name_en: String
}

"""
order by max() on columns of table "category_mediums"
"""
input category_mediums_max_order_by {
  id: order_by
  name_de: order_by
  name_en: order_by
}

"""aggregate min on columns"""
type category_mediums_min_fields {
  id: uuid
  name_de: String
  name_en: String
}

"""
order by min() on columns of table "category_mediums"
"""
input category_mediums_min_order_by {
  id: order_by
  name_de: order_by
  name_en: order_by
}

"""
response of any mutation on the table "category_mediums"
"""
type category_mediums_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [category_mediums!]!
}

"""
input type for inserting object relation for remote table "category_mediums"
"""
input category_mediums_obj_rel_insert_input {
  data: category_mediums_insert_input!
  on_conflict: category_mediums_on_conflict
}

"""
on conflict condition type for table "category_mediums"
"""
input category_mediums_on_conflict {
  constraint: category_mediums_constraint!
  update_columns: [category_mediums_update_column!]!
  where: category_mediums_bool_exp
}

"""
ordering options when selecting data from "category_mediums"
"""
input category_mediums_order_by {
  id: order_by
  name_de: order_by
  name_en: order_by
  specifications_aggregate: work_specification_mediums_aggregate_order_by
}

"""
primary key columns input for table: "category_mediums"
"""
input category_mediums_pk_columns_input {
  id: uuid!
}

"""
select columns of table "category_mediums"
"""
enum category_mediums_select_column {
  """column name"""
  id

  """column name"""
  name_de

  """column name"""
  name_en
}

"""
input type for updating data in table "category_mediums"
"""
input category_mediums_set_input {
  id: uuid
  name_de: String
  name_en: String
}

"""
update columns of table "category_mediums"
"""
enum category_mediums_update_column {
  """column name"""
  id

  """column name"""
  name_de

  """column name"""
  name_en
}

"""
columns and relationships of "category_tags"
"""
type category_tags {
  id: uuid!
  name_de: String!
  name_en: String!
}

"""
aggregated selection of "category_tags"
"""
type category_tags_aggregate {
  aggregate: category_tags_aggregate_fields
  nodes: [category_tags!]!
}

"""
aggregate fields of "category_tags"
"""
type category_tags_aggregate_fields {
  count(columns: [category_tags_select_column!], distinct: Boolean): Int
  max: category_tags_max_fields
  min: category_tags_min_fields
}

"""
order by aggregate values of table "category_tags"
"""
input category_tags_aggregate_order_by {
  count: order_by
  max: category_tags_max_order_by
  min: category_tags_min_order_by
}

"""
input type for inserting array relation for remote table "category_tags"
"""
input category_tags_arr_rel_insert_input {
  data: [category_tags_insert_input!]!
  on_conflict: category_tags_on_conflict
}

"""
Boolean expression to filter rows from the table "category_tags". All fields are combined with a logical 'AND'.
"""
input category_tags_bool_exp {
  _and: [category_tags_bool_exp]
  _not: category_tags_bool_exp
  _or: [category_tags_bool_exp]
  id: uuid_comparison_exp
  name_de: String_comparison_exp
  name_en: String_comparison_exp
}

"""
unique or primary key constraints on table "category_tags"
"""
enum category_tags_constraint {
  """unique or primary key constraint"""
  category_tags_name_de_key

  """unique or primary key constraint"""
  category_tags_name_en_key

  """unique or primary key constraint"""
  category_tags_pkey
}

"""
input type for inserting data into table "category_tags"
"""
input category_tags_insert_input {
  id: uuid
  name_de: String
  name_en: String
}

"""aggregate max on columns"""
type category_tags_max_fields {
  id: uuid
  name_de: String
  name_en: String
}

"""
order by max() on columns of table "category_tags"
"""
input category_tags_max_order_by {
  id: order_by
  name_de: order_by
  name_en: order_by
}

"""aggregate min on columns"""
type category_tags_min_fields {
  id: uuid
  name_de: String
  name_en: String
}

"""
order by min() on columns of table "category_tags"
"""
input category_tags_min_order_by {
  id: order_by
  name_de: order_by
  name_en: order_by
}

"""
response of any mutation on the table "category_tags"
"""
type category_tags_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [category_tags!]!
}

"""
input type for inserting object relation for remote table "category_tags"
"""
input category_tags_obj_rel_insert_input {
  data: category_tags_insert_input!
  on_conflict: category_tags_on_conflict
}

"""
on conflict condition type for table "category_tags"
"""
input category_tags_on_conflict {
  constraint: category_tags_constraint!
  update_columns: [category_tags_update_column!]!
  where: category_tags_bool_exp
}

"""
ordering options when selecting data from "category_tags"
"""
input category_tags_order_by {
  id: order_by
  name_de: order_by
  name_en: order_by
}

"""
primary key columns input for table: "category_tags"
"""
input category_tags_pk_columns_input {
  id: uuid!
}

"""
select columns of table "category_tags"
"""
enum category_tags_select_column {
  """column name"""
  id

  """column name"""
  name_de

  """column name"""
  name_en
}

"""
input type for updating data in table "category_tags"
"""
input category_tags_set_input {
  id: uuid
  name_de: String
  name_en: String
}

"""
update columns of table "category_tags"
"""
enum category_tags_update_column {
  """column name"""
  id

  """column name"""
  name_de

  """column name"""
  name_en
}

"""
columns and relationships of "editions"
"""
type editions {
  application_end: timestamptz!
  application_start: timestamptz!

  """An array relationship"""
  applications(
    """distinct select on columns"""
    distinct_on: [applications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [applications_order_by!]

    """filter the rows returned"""
    where: applications_bool_exp
  ): [applications!]!

  """An aggregated array relationship"""
  applications_aggregate(
    """distinct select on columns"""
    distinct_on: [applications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [applications_order_by!]

    """filter the rows returned"""
    where: applications_bool_exp
  ): applications_aggregate!
  created_at: timestamptz!
  current: Boolean
  id: Int!
  name: String!

  """An array relationship"""
  rating_rounds(
    """distinct select on columns"""
    distinct_on: [rating_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rating_rounds_order_by!]

    """filter the rows returned"""
    where: rating_rounds_bool_exp
  ): [rating_rounds!]!

  """An aggregated array relationship"""
  rating_rounds_aggregate(
    """distinct select on columns"""
    distinct_on: [rating_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rating_rounds_order_by!]

    """filter the rows returned"""
    where: rating_rounds_bool_exp
  ): rating_rounds_aggregate!

  """
  A computed field, executes function "edition_state"
  """
  state: String

  """An object relationship"""
  winner: applications
  winner_id: uuid
}

"""
aggregated selection of "editions"
"""
type editions_aggregate {
  aggregate: editions_aggregate_fields
  nodes: [editions!]!
}

"""
aggregate fields of "editions"
"""
type editions_aggregate_fields {
  avg: editions_avg_fields
  count(columns: [editions_select_column!], distinct: Boolean): Int
  max: editions_max_fields
  min: editions_min_fields
  stddev: editions_stddev_fields
  stddev_pop: editions_stddev_pop_fields
  stddev_samp: editions_stddev_samp_fields
  sum: editions_sum_fields
  var_pop: editions_var_pop_fields
  var_samp: editions_var_samp_fields
  variance: editions_variance_fields
}

"""
order by aggregate values of table "editions"
"""
input editions_aggregate_order_by {
  avg: editions_avg_order_by
  count: order_by
  max: editions_max_order_by
  min: editions_min_order_by
  stddev: editions_stddev_order_by
  stddev_pop: editions_stddev_pop_order_by
  stddev_samp: editions_stddev_samp_order_by
  sum: editions_sum_order_by
  var_pop: editions_var_pop_order_by
  var_samp: editions_var_samp_order_by
  variance: editions_variance_order_by
}

"""
input type for inserting array relation for remote table "editions"
"""
input editions_arr_rel_insert_input {
  data: [editions_insert_input!]!
  on_conflict: editions_on_conflict
}

"""aggregate avg on columns"""
type editions_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "editions"
"""
input editions_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "editions". All fields are combined with a logical 'AND'.
"""
input editions_bool_exp {
  _and: [editions_bool_exp]
  _not: editions_bool_exp
  _or: [editions_bool_exp]
  application_end: timestamptz_comparison_exp
  application_start: timestamptz_comparison_exp
  applications: applications_bool_exp
  created_at: timestamptz_comparison_exp
  current: Boolean_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  rating_rounds: rating_rounds_bool_exp
  winner: applications_bool_exp
  winner_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "editions"
"""
enum editions_constraint {
  """unique or primary key constraint"""
  editions_current_key

  """unique or primary key constraint"""
  editions_name_key

  """unique or primary key constraint"""
  editions_pkey
}

"""
input type for incrementing integer column in table "editions"
"""
input editions_inc_input {
  id: Int
}

"""
input type for inserting data into table "editions"
"""
input editions_insert_input {
  application_end: timestamptz
  application_start: timestamptz
  applications: applications_arr_rel_insert_input
  created_at: timestamptz
  current: Boolean
  id: Int
  name: String
  rating_rounds: rating_rounds_arr_rel_insert_input
  winner: applications_obj_rel_insert_input
  winner_id: uuid
}

"""aggregate max on columns"""
type editions_max_fields {
  application_end: timestamptz
  application_start: timestamptz
  created_at: timestamptz
  id: Int
  name: String
  winner_id: uuid
}

"""
order by max() on columns of table "editions"
"""
input editions_max_order_by {
  application_end: order_by
  application_start: order_by
  created_at: order_by
  id: order_by
  name: order_by
  winner_id: order_by
}

"""aggregate min on columns"""
type editions_min_fields {
  application_end: timestamptz
  application_start: timestamptz
  created_at: timestamptz
  id: Int
  name: String
  winner_id: uuid
}

"""
order by min() on columns of table "editions"
"""
input editions_min_order_by {
  application_end: order_by
  application_start: order_by
  created_at: order_by
  id: order_by
  name: order_by
  winner_id: order_by
}

"""
response of any mutation on the table "editions"
"""
type editions_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [editions!]!
}

"""
input type for inserting object relation for remote table "editions"
"""
input editions_obj_rel_insert_input {
  data: editions_insert_input!
  on_conflict: editions_on_conflict
}

"""
on conflict condition type for table "editions"
"""
input editions_on_conflict {
  constraint: editions_constraint!
  update_columns: [editions_update_column!]!
  where: editions_bool_exp
}

"""
ordering options when selecting data from "editions"
"""
input editions_order_by {
  application_end: order_by
  application_start: order_by
  applications_aggregate: applications_aggregate_order_by
  created_at: order_by
  current: order_by
  id: order_by
  name: order_by
  rating_rounds_aggregate: rating_rounds_aggregate_order_by
  winner: applications_order_by
  winner_id: order_by
}

"""
primary key columns input for table: "editions"
"""
input editions_pk_columns_input {
  id: Int!
}

"""
select columns of table "editions"
"""
enum editions_select_column {
  """column name"""
  application_end

  """column name"""
  application_start

  """column name"""
  created_at

  """column name"""
  current

  """column name"""
  id

  """column name"""
  name

  """column name"""
  winner_id
}

"""
input type for updating data in table "editions"
"""
input editions_set_input {
  application_end: timestamptz
  application_start: timestamptz
  created_at: timestamptz
  current: Boolean
  id: Int
  name: String
  winner_id: uuid
}

"""aggregate stddev on columns"""
type editions_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "editions"
"""
input editions_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type editions_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "editions"
"""
input editions_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type editions_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "editions"
"""
input editions_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type editions_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "editions"
"""
input editions_sum_order_by {
  id: order_by
}

"""
update columns of table "editions"
"""
enum editions_update_column {
  """column name"""
  application_end

  """column name"""
  application_start

  """column name"""
  created_at

  """column name"""
  current

  """column name"""
  id

  """column name"""
  name

  """column name"""
  winner_id
}

"""aggregate var_pop on columns"""
type editions_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "editions"
"""
input editions_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type editions_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "editions"
"""
input editions_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type editions_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "editions"
"""
input editions_variance_order_by {
  id: order_by
}

"""
columns and relationships of "eliminations"
"""
type eliminations {
  """An object relationship"""
  application: applications!
  application_id: uuid!
  created_at: timestamptz!
  created_by: String!

  """An object relationship"""
  eliminated_by: users!
  id: Int!

  """An object relationship"""
  rating_round: rating_rounds
  reason: String
  round_id: Int
}

"""
aggregated selection of "eliminations"
"""
type eliminations_aggregate {
  aggregate: eliminations_aggregate_fields
  nodes: [eliminations!]!
}

"""
aggregate fields of "eliminations"
"""
type eliminations_aggregate_fields {
  avg: eliminations_avg_fields
  count(columns: [eliminations_select_column!], distinct: Boolean): Int
  max: eliminations_max_fields
  min: eliminations_min_fields
  stddev: eliminations_stddev_fields
  stddev_pop: eliminations_stddev_pop_fields
  stddev_samp: eliminations_stddev_samp_fields
  sum: eliminations_sum_fields
  var_pop: eliminations_var_pop_fields
  var_samp: eliminations_var_samp_fields
  variance: eliminations_variance_fields
}

"""
order by aggregate values of table "eliminations"
"""
input eliminations_aggregate_order_by {
  avg: eliminations_avg_order_by
  count: order_by
  max: eliminations_max_order_by
  min: eliminations_min_order_by
  stddev: eliminations_stddev_order_by
  stddev_pop: eliminations_stddev_pop_order_by
  stddev_samp: eliminations_stddev_samp_order_by
  sum: eliminations_sum_order_by
  var_pop: eliminations_var_pop_order_by
  var_samp: eliminations_var_samp_order_by
  variance: eliminations_variance_order_by
}

"""
input type for inserting array relation for remote table "eliminations"
"""
input eliminations_arr_rel_insert_input {
  data: [eliminations_insert_input!]!
  on_conflict: eliminations_on_conflict
}

"""aggregate avg on columns"""
type eliminations_avg_fields {
  id: Float
  round_id: Float
}

"""
order by avg() on columns of table "eliminations"
"""
input eliminations_avg_order_by {
  id: order_by
  round_id: order_by
}

"""
Boolean expression to filter rows from the table "eliminations". All fields are combined with a logical 'AND'.
"""
input eliminations_bool_exp {
  _and: [eliminations_bool_exp]
  _not: eliminations_bool_exp
  _or: [eliminations_bool_exp]
  application: applications_bool_exp
  application_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  created_by: String_comparison_exp
  eliminated_by: users_bool_exp
  id: Int_comparison_exp
  rating_round: rating_rounds_bool_exp
  reason: String_comparison_exp
  round_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "eliminations"
"""
enum eliminations_constraint {
  """unique or primary key constraint"""
  eliminations_application_id_key

  """unique or primary key constraint"""
  eliminations_id_key

  """unique or primary key constraint"""
  eliminations_pkey
}

"""
input type for incrementing integer column in table "eliminations"
"""
input eliminations_inc_input {
  id: Int
  round_id: Int
}

"""
input type for inserting data into table "eliminations"
"""
input eliminations_insert_input {
  application: applications_obj_rel_insert_input
  application_id: uuid
  created_at: timestamptz
  created_by: String
  eliminated_by: users_obj_rel_insert_input
  id: Int
  rating_round: rating_rounds_obj_rel_insert_input
  reason: String
  round_id: Int
}

"""aggregate max on columns"""
type eliminations_max_fields {
  application_id: uuid
  created_at: timestamptz
  created_by: String
  id: Int
  reason: String
  round_id: Int
}

"""
order by max() on columns of table "eliminations"
"""
input eliminations_max_order_by {
  application_id: order_by
  created_at: order_by
  created_by: order_by
  id: order_by
  reason: order_by
  round_id: order_by
}

"""aggregate min on columns"""
type eliminations_min_fields {
  application_id: uuid
  created_at: timestamptz
  created_by: String
  id: Int
  reason: String
  round_id: Int
}

"""
order by min() on columns of table "eliminations"
"""
input eliminations_min_order_by {
  application_id: order_by
  created_at: order_by
  created_by: order_by
  id: order_by
  reason: order_by
  round_id: order_by
}

"""
response of any mutation on the table "eliminations"
"""
type eliminations_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [eliminations!]!
}

"""
input type for inserting object relation for remote table "eliminations"
"""
input eliminations_obj_rel_insert_input {
  data: eliminations_insert_input!
  on_conflict: eliminations_on_conflict
}

"""
on conflict condition type for table "eliminations"
"""
input eliminations_on_conflict {
  constraint: eliminations_constraint!
  update_columns: [eliminations_update_column!]!
  where: eliminations_bool_exp
}

"""
ordering options when selecting data from "eliminations"
"""
input eliminations_order_by {
  application: applications_order_by
  application_id: order_by
  created_at: order_by
  created_by: order_by
  eliminated_by: users_order_by
  id: order_by
  rating_round: rating_rounds_order_by
  reason: order_by
  round_id: order_by
}

"""
primary key columns input for table: "eliminations"
"""
input eliminations_pk_columns_input {
  application_id: uuid!
}

"""
select columns of table "eliminations"
"""
enum eliminations_select_column {
  """column name"""
  application_id

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  id

  """column name"""
  reason

  """column name"""
  round_id
}

"""
input type for updating data in table "eliminations"
"""
input eliminations_set_input {
  application_id: uuid
  created_at: timestamptz
  created_by: String
  id: Int
  reason: String
  round_id: Int
}

"""aggregate stddev on columns"""
type eliminations_stddev_fields {
  id: Float
  round_id: Float
}

"""
order by stddev() on columns of table "eliminations"
"""
input eliminations_stddev_order_by {
  id: order_by
  round_id: order_by
}

"""aggregate stddev_pop on columns"""
type eliminations_stddev_pop_fields {
  id: Float
  round_id: Float
}

"""
order by stddev_pop() on columns of table "eliminations"
"""
input eliminations_stddev_pop_order_by {
  id: order_by
  round_id: order_by
}

"""aggregate stddev_samp on columns"""
type eliminations_stddev_samp_fields {
  id: Float
  round_id: Float
}

"""
order by stddev_samp() on columns of table "eliminations"
"""
input eliminations_stddev_samp_order_by {
  id: order_by
  round_id: order_by
}

"""aggregate sum on columns"""
type eliminations_sum_fields {
  id: Int
  round_id: Int
}

"""
order by sum() on columns of table "eliminations"
"""
input eliminations_sum_order_by {
  id: order_by
  round_id: order_by
}

"""
update columns of table "eliminations"
"""
enum eliminations_update_column {
  """column name"""
  application_id

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  id

  """column name"""
  reason

  """column name"""
  round_id
}

"""aggregate var_pop on columns"""
type eliminations_var_pop_fields {
  id: Float
  round_id: Float
}

"""
order by var_pop() on columns of table "eliminations"
"""
input eliminations_var_pop_order_by {
  id: order_by
  round_id: order_by
}

"""aggregate var_samp on columns"""
type eliminations_var_samp_fields {
  id: Float
  round_id: Float
}

"""
order by var_samp() on columns of table "eliminations"
"""
input eliminations_var_samp_order_by {
  id: order_by
  round_id: order_by
}

"""aggregate variance on columns"""
type eliminations_variance_fields {
  id: Float
  round_id: Float
}

"""
order by variance() on columns of table "eliminations"
"""
input eliminations_variance_order_by {
  id: order_by
  round_id: order_by
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "messages"
"""
type messages {
  """An object relationship"""
  application: applications!
  application_id: uuid!
  created_at: timestamp!
  created_by: String!
  id: Int!

  """An object relationship"""
  rating: ratings

  """An object relationship"""
  rating_round: rating_rounds
  round_id: Int
  text: String!

  """An object relationship"""
  user: users!
}

"""
aggregated selection of "messages"
"""
type messages_aggregate {
  aggregate: messages_aggregate_fields
  nodes: [messages!]!
}

"""
aggregate fields of "messages"
"""
type messages_aggregate_fields {
  avg: messages_avg_fields
  count(columns: [messages_select_column!], distinct: Boolean): Int
  max: messages_max_fields
  min: messages_min_fields
  stddev: messages_stddev_fields
  stddev_pop: messages_stddev_pop_fields
  stddev_samp: messages_stddev_samp_fields
  sum: messages_sum_fields
  var_pop: messages_var_pop_fields
  var_samp: messages_var_samp_fields
  variance: messages_variance_fields
}

"""
order by aggregate values of table "messages"
"""
input messages_aggregate_order_by {
  avg: messages_avg_order_by
  count: order_by
  max: messages_max_order_by
  min: messages_min_order_by
  stddev: messages_stddev_order_by
  stddev_pop: messages_stddev_pop_order_by
  stddev_samp: messages_stddev_samp_order_by
  sum: messages_sum_order_by
  var_pop: messages_var_pop_order_by
  var_samp: messages_var_samp_order_by
  variance: messages_variance_order_by
}

"""
input type for inserting array relation for remote table "messages"
"""
input messages_arr_rel_insert_input {
  data: [messages_insert_input!]!
  on_conflict: messages_on_conflict
}

"""aggregate avg on columns"""
type messages_avg_fields {
  id: Float
  round_id: Float
}

"""
order by avg() on columns of table "messages"
"""
input messages_avg_order_by {
  id: order_by
  round_id: order_by
}

"""
Boolean expression to filter rows from the table "messages". All fields are combined with a logical 'AND'.
"""
input messages_bool_exp {
  _and: [messages_bool_exp]
  _not: messages_bool_exp
  _or: [messages_bool_exp]
  application: applications_bool_exp
  application_id: uuid_comparison_exp
  created_at: timestamp_comparison_exp
  created_by: String_comparison_exp
  id: Int_comparison_exp
  rating: ratings_bool_exp
  rating_round: rating_rounds_bool_exp
  round_id: Int_comparison_exp
  text: String_comparison_exp
  user: users_bool_exp
}

"""
unique or primary key constraints on table "messages"
"""
enum messages_constraint {
  """unique or primary key constraint"""
  messages_pkey
}

"""
input type for incrementing integer column in table "messages"
"""
input messages_inc_input {
  id: Int
  round_id: Int
}

"""
input type for inserting data into table "messages"
"""
input messages_insert_input {
  application: applications_obj_rel_insert_input
  application_id: uuid
  created_at: timestamp
  created_by: String
  id: Int
  rating: ratings_obj_rel_insert_input
  rating_round: rating_rounds_obj_rel_insert_input
  round_id: Int
  text: String
  user: users_obj_rel_insert_input
}

"""aggregate max on columns"""
type messages_max_fields {
  application_id: uuid
  created_at: timestamp
  created_by: String
  id: Int
  round_id: Int
  text: String
}

"""
order by max() on columns of table "messages"
"""
input messages_max_order_by {
  application_id: order_by
  created_at: order_by
  created_by: order_by
  id: order_by
  round_id: order_by
  text: order_by
}

"""aggregate min on columns"""
type messages_min_fields {
  application_id: uuid
  created_at: timestamp
  created_by: String
  id: Int
  round_id: Int
  text: String
}

"""
order by min() on columns of table "messages"
"""
input messages_min_order_by {
  application_id: order_by
  created_at: order_by
  created_by: order_by
  id: order_by
  round_id: order_by
  text: order_by
}

"""
response of any mutation on the table "messages"
"""
type messages_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [messages!]!
}

"""
input type for inserting object relation for remote table "messages"
"""
input messages_obj_rel_insert_input {
  data: messages_insert_input!
  on_conflict: messages_on_conflict
}

"""
on conflict condition type for table "messages"
"""
input messages_on_conflict {
  constraint: messages_constraint!
  update_columns: [messages_update_column!]!
  where: messages_bool_exp
}

"""
ordering options when selecting data from "messages"
"""
input messages_order_by {
  application: applications_order_by
  application_id: order_by
  created_at: order_by
  created_by: order_by
  id: order_by
  rating: ratings_order_by
  rating_round: rating_rounds_order_by
  round_id: order_by
  text: order_by
  user: users_order_by
}

"""
primary key columns input for table: "messages"
"""
input messages_pk_columns_input {
  id: Int!
}

"""
select columns of table "messages"
"""
enum messages_select_column {
  """column name"""
  application_id

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  id

  """column name"""
  round_id

  """column name"""
  text
}

"""
input type for updating data in table "messages"
"""
input messages_set_input {
  application_id: uuid
  created_at: timestamp
  created_by: String
  id: Int
  round_id: Int
  text: String
}

"""aggregate stddev on columns"""
type messages_stddev_fields {
  id: Float
  round_id: Float
}

"""
order by stddev() on columns of table "messages"
"""
input messages_stddev_order_by {
  id: order_by
  round_id: order_by
}

"""aggregate stddev_pop on columns"""
type messages_stddev_pop_fields {
  id: Float
  round_id: Float
}

"""
order by stddev_pop() on columns of table "messages"
"""
input messages_stddev_pop_order_by {
  id: order_by
  round_id: order_by
}

"""aggregate stddev_samp on columns"""
type messages_stddev_samp_fields {
  id: Float
  round_id: Float
}

"""
order by stddev_samp() on columns of table "messages"
"""
input messages_stddev_samp_order_by {
  id: order_by
  round_id: order_by
}

"""aggregate sum on columns"""
type messages_sum_fields {
  id: Int
  round_id: Int
}

"""
order by sum() on columns of table "messages"
"""
input messages_sum_order_by {
  id: order_by
  round_id: order_by
}

"""
update columns of table "messages"
"""
enum messages_update_column {
  """column name"""
  application_id

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  id

  """column name"""
  round_id

  """column name"""
  text
}

"""aggregate var_pop on columns"""
type messages_var_pop_fields {
  id: Float
  round_id: Float
}

"""
order by var_pop() on columns of table "messages"
"""
input messages_var_pop_order_by {
  id: order_by
  round_id: order_by
}

"""aggregate var_samp on columns"""
type messages_var_samp_fields {
  id: Float
  round_id: Float
}

"""
order by var_samp() on columns of table "messages"
"""
input messages_var_samp_order_by {
  id: order_by
  round_id: order_by
}

"""aggregate variance on columns"""
type messages_variance_fields {
  id: Float
  round_id: Float
}

"""
order by variance() on columns of table "messages"
"""
input messages_variance_order_by {
  id: order_by
  round_id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "applications"
  """
  delete_applications(
    """filter the rows which have to be deleted"""
    where: applications_bool_exp!
  ): applications_mutation_response

  """
  delete single row from the table: "applications"
  """
  delete_applications_by_pk(id: uuid!): applications

  """
  delete data from the table: "category_mediums"
  """
  delete_category_mediums(
    """filter the rows which have to be deleted"""
    where: category_mediums_bool_exp!
  ): category_mediums_mutation_response

  """
  delete single row from the table: "category_mediums"
  """
  delete_category_mediums_by_pk(id: uuid!): category_mediums

  """
  delete data from the table: "category_tags"
  """
  delete_category_tags(
    """filter the rows which have to be deleted"""
    where: category_tags_bool_exp!
  ): category_tags_mutation_response

  """
  delete single row from the table: "category_tags"
  """
  delete_category_tags_by_pk(id: uuid!): category_tags

  """
  delete data from the table: "editions"
  """
  delete_editions(
    """filter the rows which have to be deleted"""
    where: editions_bool_exp!
  ): editions_mutation_response

  """
  delete single row from the table: "editions"
  """
  delete_editions_by_pk(id: Int!): editions

  """
  delete data from the table: "eliminations"
  """
  delete_eliminations(
    """filter the rows which have to be deleted"""
    where: eliminations_bool_exp!
  ): eliminations_mutation_response

  """
  delete single row from the table: "eliminations"
  """
  delete_eliminations_by_pk(application_id: uuid!): eliminations

  """
  delete data from the table: "messages"
  """
  delete_messages(
    """filter the rows which have to be deleted"""
    where: messages_bool_exp!
  ): messages_mutation_response

  """
  delete single row from the table: "messages"
  """
  delete_messages_by_pk(id: Int!): messages

  """
  delete data from the table: "payments"
  """
  delete_payments(
    """filter the rows which have to be deleted"""
    where: payments_bool_exp!
  ): payments_mutation_response

  """
  delete single row from the table: "payments"
  """
  delete_payments_by_pk(id: uuid!): payments

  """
  delete data from the table: "rating_rounds"
  """
  delete_rating_rounds(
    """filter the rows which have to be deleted"""
    where: rating_rounds_bool_exp!
  ): rating_rounds_mutation_response

  """
  delete single row from the table: "rating_rounds"
  """
  delete_rating_rounds_by_pk(id: Int!): rating_rounds

  """
  delete data from the table: "ratings"
  """
  delete_ratings(
    """filter the rows which have to be deleted"""
    where: ratings_bool_exp!
  ): ratings_mutation_response

  """
  delete single row from the table: "ratings"
  """
  delete_ratings_by_pk(id: uuid!): ratings

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: String!): users

  """
  delete data from the table: "users_online"
  """
  delete_users_online(
    """filter the rows which have to be deleted"""
    where: users_online_bool_exp!
  ): users_online_mutation_response

  """
  delete data from the table: "wordlist"
  """
  delete_wordlist(
    """filter the rows which have to be deleted"""
    where: wordlist_bool_exp!
  ): wordlist_mutation_response

  """
  delete single row from the table: "wordlist"
  """
  delete_wordlist_by_pk(id: Int!): wordlist

  """
  delete data from the table: "work_files"
  """
  delete_work_files(
    """filter the rows which have to be deleted"""
    where: work_files_bool_exp!
  ): work_files_mutation_response

  """
  delete single row from the table: "work_files"
  """
  delete_work_files_by_pk(id: uuid!): work_files

  """
  delete data from the table: "work_specification_mediums"
  """
  delete_work_specification_mediums(
    """filter the rows which have to be deleted"""
    where: work_specification_mediums_bool_exp!
  ): work_specification_mediums_mutation_response

  """
  delete single row from the table: "work_specification_mediums"
  """
  delete_work_specification_mediums_by_pk(medium_id: uuid!, specification_id: uuid!): work_specification_mediums

  """
  delete data from the table: "work_specification_tags"
  """
  delete_work_specification_tags(
    """filter the rows which have to be deleted"""
    where: work_specification_tags_bool_exp!
  ): work_specification_tags_mutation_response

  """
  delete single row from the table: "work_specification_tags"
  """
  delete_work_specification_tags_by_pk(specification_id: uuid!, tag_id: uuid!): work_specification_tags

  """
  delete data from the table: "work_specifications"
  """
  delete_work_specifications(
    """filter the rows which have to be deleted"""
    where: work_specifications_bool_exp!
  ): work_specifications_mutation_response

  """
  delete single row from the table: "work_specifications"
  """
  delete_work_specifications_by_pk(id: uuid!): work_specifications

  """
  delete data from the table: "works"
  """
  delete_works(
    """filter the rows which have to be deleted"""
    where: works_bool_exp!
  ): works_mutation_response

  """
  delete single row from the table: "works"
  """
  delete_works_by_pk(id: uuid!): works

  """
  insert data into the table: "applications"
  """
  insert_applications(
    """the rows to be inserted"""
    objects: [applications_insert_input!]!

    """on conflict condition"""
    on_conflict: applications_on_conflict
  ): applications_mutation_response

  """
  insert a single row into the table: "applications"
  """
  insert_applications_one(
    """the row to be inserted"""
    object: applications_insert_input!

    """on conflict condition"""
    on_conflict: applications_on_conflict
  ): applications

  """
  insert data into the table: "category_mediums"
  """
  insert_category_mediums(
    """the rows to be inserted"""
    objects: [category_mediums_insert_input!]!

    """on conflict condition"""
    on_conflict: category_mediums_on_conflict
  ): category_mediums_mutation_response

  """
  insert a single row into the table: "category_mediums"
  """
  insert_category_mediums_one(
    """the row to be inserted"""
    object: category_mediums_insert_input!

    """on conflict condition"""
    on_conflict: category_mediums_on_conflict
  ): category_mediums

  """
  insert data into the table: "category_tags"
  """
  insert_category_tags(
    """the rows to be inserted"""
    objects: [category_tags_insert_input!]!

    """on conflict condition"""
    on_conflict: category_tags_on_conflict
  ): category_tags_mutation_response

  """
  insert a single row into the table: "category_tags"
  """
  insert_category_tags_one(
    """the row to be inserted"""
    object: category_tags_insert_input!

    """on conflict condition"""
    on_conflict: category_tags_on_conflict
  ): category_tags

  """
  insert data into the table: "editions"
  """
  insert_editions(
    """the rows to be inserted"""
    objects: [editions_insert_input!]!

    """on conflict condition"""
    on_conflict: editions_on_conflict
  ): editions_mutation_response

  """
  insert a single row into the table: "editions"
  """
  insert_editions_one(
    """the row to be inserted"""
    object: editions_insert_input!

    """on conflict condition"""
    on_conflict: editions_on_conflict
  ): editions

  """
  insert data into the table: "eliminations"
  """
  insert_eliminations(
    """the rows to be inserted"""
    objects: [eliminations_insert_input!]!

    """on conflict condition"""
    on_conflict: eliminations_on_conflict
  ): eliminations_mutation_response

  """
  insert a single row into the table: "eliminations"
  """
  insert_eliminations_one(
    """the row to be inserted"""
    object: eliminations_insert_input!

    """on conflict condition"""
    on_conflict: eliminations_on_conflict
  ): eliminations

  """
  insert data into the table: "messages"
  """
  insert_messages(
    """the rows to be inserted"""
    objects: [messages_insert_input!]!

    """on conflict condition"""
    on_conflict: messages_on_conflict
  ): messages_mutation_response

  """
  insert a single row into the table: "messages"
  """
  insert_messages_one(
    """the row to be inserted"""
    object: messages_insert_input!

    """on conflict condition"""
    on_conflict: messages_on_conflict
  ): messages

  """
  insert data into the table: "payments"
  """
  insert_payments(
    """the rows to be inserted"""
    objects: [payments_insert_input!]!

    """on conflict condition"""
    on_conflict: payments_on_conflict
  ): payments_mutation_response

  """
  insert a single row into the table: "payments"
  """
  insert_payments_one(
    """the row to be inserted"""
    object: payments_insert_input!

    """on conflict condition"""
    on_conflict: payments_on_conflict
  ): payments

  """
  insert data into the table: "rating_rounds"
  """
  insert_rating_rounds(
    """the rows to be inserted"""
    objects: [rating_rounds_insert_input!]!

    """on conflict condition"""
    on_conflict: rating_rounds_on_conflict
  ): rating_rounds_mutation_response

  """
  insert a single row into the table: "rating_rounds"
  """
  insert_rating_rounds_one(
    """the row to be inserted"""
    object: rating_rounds_insert_input!

    """on conflict condition"""
    on_conflict: rating_rounds_on_conflict
  ): rating_rounds

  """
  insert data into the table: "ratings"
  """
  insert_ratings(
    """the rows to be inserted"""
    objects: [ratings_insert_input!]!

    """on conflict condition"""
    on_conflict: ratings_on_conflict
  ): ratings_mutation_response

  """
  insert a single row into the table: "ratings"
  """
  insert_ratings_one(
    """the row to be inserted"""
    object: ratings_insert_input!

    """on conflict condition"""
    on_conflict: ratings_on_conflict
  ): ratings

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users

  """
  insert data into the table: "users_online"
  """
  insert_users_online(
    """the rows to be inserted"""
    objects: [users_online_insert_input!]!
  ): users_online_mutation_response

  """
  insert a single row into the table: "users_online"
  """
  insert_users_online_one(
    """the row to be inserted"""
    object: users_online_insert_input!
  ): users_online

  """
  insert data into the table: "wordlist"
  """
  insert_wordlist(
    """the rows to be inserted"""
    objects: [wordlist_insert_input!]!

    """on conflict condition"""
    on_conflict: wordlist_on_conflict
  ): wordlist_mutation_response

  """
  insert a single row into the table: "wordlist"
  """
  insert_wordlist_one(
    """the row to be inserted"""
    object: wordlist_insert_input!

    """on conflict condition"""
    on_conflict: wordlist_on_conflict
  ): wordlist

  """
  insert data into the table: "work_files"
  """
  insert_work_files(
    """the rows to be inserted"""
    objects: [work_files_insert_input!]!

    """on conflict condition"""
    on_conflict: work_files_on_conflict
  ): work_files_mutation_response

  """
  insert a single row into the table: "work_files"
  """
  insert_work_files_one(
    """the row to be inserted"""
    object: work_files_insert_input!

    """on conflict condition"""
    on_conflict: work_files_on_conflict
  ): work_files

  """
  insert data into the table: "work_specification_mediums"
  """
  insert_work_specification_mediums(
    """the rows to be inserted"""
    objects: [work_specification_mediums_insert_input!]!

    """on conflict condition"""
    on_conflict: work_specification_mediums_on_conflict
  ): work_specification_mediums_mutation_response

  """
  insert a single row into the table: "work_specification_mediums"
  """
  insert_work_specification_mediums_one(
    """the row to be inserted"""
    object: work_specification_mediums_insert_input!

    """on conflict condition"""
    on_conflict: work_specification_mediums_on_conflict
  ): work_specification_mediums

  """
  insert data into the table: "work_specification_tags"
  """
  insert_work_specification_tags(
    """the rows to be inserted"""
    objects: [work_specification_tags_insert_input!]!

    """on conflict condition"""
    on_conflict: work_specification_tags_on_conflict
  ): work_specification_tags_mutation_response

  """
  insert a single row into the table: "work_specification_tags"
  """
  insert_work_specification_tags_one(
    """the row to be inserted"""
    object: work_specification_tags_insert_input!

    """on conflict condition"""
    on_conflict: work_specification_tags_on_conflict
  ): work_specification_tags

  """
  insert data into the table: "work_specifications"
  """
  insert_work_specifications(
    """the rows to be inserted"""
    objects: [work_specifications_insert_input!]!

    """on conflict condition"""
    on_conflict: work_specifications_on_conflict
  ): work_specifications_mutation_response

  """
  insert a single row into the table: "work_specifications"
  """
  insert_work_specifications_one(
    """the row to be inserted"""
    object: work_specifications_insert_input!

    """on conflict condition"""
    on_conflict: work_specifications_on_conflict
  ): work_specifications

  """
  insert data into the table: "works"
  """
  insert_works(
    """the rows to be inserted"""
    objects: [works_insert_input!]!

    """on conflict condition"""
    on_conflict: works_on_conflict
  ): works_mutation_response

  """
  insert a single row into the table: "works"
  """
  insert_works_one(
    """the row to be inserted"""
    object: works_insert_input!

    """on conflict condition"""
    on_conflict: works_on_conflict
  ): works

  """
  update data of the table: "applications"
  """
  update_applications(
    """increments the integer columns with given value of the filtered values"""
    _inc: applications_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: applications_set_input

    """filter the rows which have to be updated"""
    where: applications_bool_exp!
  ): applications_mutation_response

  """
  update single row of the table: "applications"
  """
  update_applications_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: applications_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: applications_set_input
    pk_columns: applications_pk_columns_input!
  ): applications

  """
  update data of the table: "category_mediums"
  """
  update_category_mediums(
    """sets the columns of the filtered rows to the given values"""
    _set: category_mediums_set_input

    """filter the rows which have to be updated"""
    where: category_mediums_bool_exp!
  ): category_mediums_mutation_response

  """
  update single row of the table: "category_mediums"
  """
  update_category_mediums_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: category_mediums_set_input
    pk_columns: category_mediums_pk_columns_input!
  ): category_mediums

  """
  update data of the table: "category_tags"
  """
  update_category_tags(
    """sets the columns of the filtered rows to the given values"""
    _set: category_tags_set_input

    """filter the rows which have to be updated"""
    where: category_tags_bool_exp!
  ): category_tags_mutation_response

  """
  update single row of the table: "category_tags"
  """
  update_category_tags_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: category_tags_set_input
    pk_columns: category_tags_pk_columns_input!
  ): category_tags

  """
  update data of the table: "editions"
  """
  update_editions(
    """increments the integer columns with given value of the filtered values"""
    _inc: editions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: editions_set_input

    """filter the rows which have to be updated"""
    where: editions_bool_exp!
  ): editions_mutation_response

  """
  update single row of the table: "editions"
  """
  update_editions_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: editions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: editions_set_input
    pk_columns: editions_pk_columns_input!
  ): editions

  """
  update data of the table: "eliminations"
  """
  update_eliminations(
    """increments the integer columns with given value of the filtered values"""
    _inc: eliminations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: eliminations_set_input

    """filter the rows which have to be updated"""
    where: eliminations_bool_exp!
  ): eliminations_mutation_response

  """
  update single row of the table: "eliminations"
  """
  update_eliminations_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: eliminations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: eliminations_set_input
    pk_columns: eliminations_pk_columns_input!
  ): eliminations

  """
  update data of the table: "messages"
  """
  update_messages(
    """increments the integer columns with given value of the filtered values"""
    _inc: messages_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: messages_set_input

    """filter the rows which have to be updated"""
    where: messages_bool_exp!
  ): messages_mutation_response

  """
  update single row of the table: "messages"
  """
  update_messages_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: messages_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: messages_set_input
    pk_columns: messages_pk_columns_input!
  ): messages

  """
  update data of the table: "payments"
  """
  update_payments(
    """increments the integer columns with given value of the filtered values"""
    _inc: payments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: payments_set_input

    """filter the rows which have to be updated"""
    where: payments_bool_exp!
  ): payments_mutation_response

  """
  update single row of the table: "payments"
  """
  update_payments_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: payments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: payments_set_input
    pk_columns: payments_pk_columns_input!
  ): payments

  """
  update data of the table: "rating_rounds"
  """
  update_rating_rounds(
    """increments the integer columns with given value of the filtered values"""
    _inc: rating_rounds_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: rating_rounds_set_input

    """filter the rows which have to be updated"""
    where: rating_rounds_bool_exp!
  ): rating_rounds_mutation_response

  """
  update single row of the table: "rating_rounds"
  """
  update_rating_rounds_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: rating_rounds_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: rating_rounds_set_input
    pk_columns: rating_rounds_pk_columns_input!
  ): rating_rounds

  """
  update data of the table: "ratings"
  """
  update_ratings(
    """increments the integer columns with given value of the filtered values"""
    _inc: ratings_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: ratings_set_input

    """filter the rows which have to be updated"""
    where: ratings_bool_exp!
  ): ratings_mutation_response

  """
  update single row of the table: "ratings"
  """
  update_ratings_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: ratings_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: ratings_set_input
    pk_columns: ratings_pk_columns_input!
  ): ratings

  """
  update data of the table: "users"
  """
  update_users(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users

  """
  update data of the table: "users_online"
  """
  update_users_online(
    """sets the columns of the filtered rows to the given values"""
    _set: users_online_set_input

    """filter the rows which have to be updated"""
    where: users_online_bool_exp!
  ): users_online_mutation_response

  """
  update data of the table: "wordlist"
  """
  update_wordlist(
    """increments the integer columns with given value of the filtered values"""
    _inc: wordlist_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: wordlist_set_input

    """filter the rows which have to be updated"""
    where: wordlist_bool_exp!
  ): wordlist_mutation_response

  """
  update single row of the table: "wordlist"
  """
  update_wordlist_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: wordlist_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: wordlist_set_input
    pk_columns: wordlist_pk_columns_input!
  ): wordlist

  """
  update data of the table: "work_files"
  """
  update_work_files(
    """increments the integer columns with given value of the filtered values"""
    _inc: work_files_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: work_files_set_input

    """filter the rows which have to be updated"""
    where: work_files_bool_exp!
  ): work_files_mutation_response

  """
  update single row of the table: "work_files"
  """
  update_work_files_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: work_files_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: work_files_set_input
    pk_columns: work_files_pk_columns_input!
  ): work_files

  """
  update data of the table: "work_specification_mediums"
  """
  update_work_specification_mediums(
    """sets the columns of the filtered rows to the given values"""
    _set: work_specification_mediums_set_input

    """filter the rows which have to be updated"""
    where: work_specification_mediums_bool_exp!
  ): work_specification_mediums_mutation_response

  """
  update single row of the table: "work_specification_mediums"
  """
  update_work_specification_mediums_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: work_specification_mediums_set_input
    pk_columns: work_specification_mediums_pk_columns_input!
  ): work_specification_mediums

  """
  update data of the table: "work_specification_tags"
  """
  update_work_specification_tags(
    """sets the columns of the filtered rows to the given values"""
    _set: work_specification_tags_set_input

    """filter the rows which have to be updated"""
    where: work_specification_tags_bool_exp!
  ): work_specification_tags_mutation_response

  """
  update single row of the table: "work_specification_tags"
  """
  update_work_specification_tags_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: work_specification_tags_set_input
    pk_columns: work_specification_tags_pk_columns_input!
  ): work_specification_tags

  """
  update data of the table: "work_specifications"
  """
  update_work_specifications(
    """increments the integer columns with given value of the filtered values"""
    _inc: work_specifications_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: work_specifications_set_input

    """filter the rows which have to be updated"""
    where: work_specifications_bool_exp!
  ): work_specifications_mutation_response

  """
  update single row of the table: "work_specifications"
  """
  update_work_specifications_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: work_specifications_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: work_specifications_set_input
    pk_columns: work_specifications_pk_columns_input!
  ): work_specifications

  """
  update data of the table: "works"
  """
  update_works(
    """increments the integer columns with given value of the filtered values"""
    _inc: works_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: works_set_input

    """filter the rows which have to be updated"""
    where: works_bool_exp!
  ): works_mutation_response

  """
  update single row of the table: "works"
  """
  update_works_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: works_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: works_set_input
    pk_columns: works_pk_columns_input!
  ): works
}

scalar numeric

"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "payments"
"""
type payments {
  """An object relationship"""
  application: applications!
  application_id: uuid!
  created_at: timestamptz!
  id: uuid!
  key: String!
  mimetype: String!
  originalname: String!
  size: numeric!
}

"""
aggregated selection of "payments"
"""
type payments_aggregate {
  aggregate: payments_aggregate_fields
  nodes: [payments!]!
}

"""
aggregate fields of "payments"
"""
type payments_aggregate_fields {
  avg: payments_avg_fields
  count(columns: [payments_select_column!], distinct: Boolean): Int
  max: payments_max_fields
  min: payments_min_fields
  stddev: payments_stddev_fields
  stddev_pop: payments_stddev_pop_fields
  stddev_samp: payments_stddev_samp_fields
  sum: payments_sum_fields
  var_pop: payments_var_pop_fields
  var_samp: payments_var_samp_fields
  variance: payments_variance_fields
}

"""
order by aggregate values of table "payments"
"""
input payments_aggregate_order_by {
  avg: payments_avg_order_by
  count: order_by
  max: payments_max_order_by
  min: payments_min_order_by
  stddev: payments_stddev_order_by
  stddev_pop: payments_stddev_pop_order_by
  stddev_samp: payments_stddev_samp_order_by
  sum: payments_sum_order_by
  var_pop: payments_var_pop_order_by
  var_samp: payments_var_samp_order_by
  variance: payments_variance_order_by
}

"""
input type for inserting array relation for remote table "payments"
"""
input payments_arr_rel_insert_input {
  data: [payments_insert_input!]!
  on_conflict: payments_on_conflict
}

"""aggregate avg on columns"""
type payments_avg_fields {
  size: Float
}

"""
order by avg() on columns of table "payments"
"""
input payments_avg_order_by {
  size: order_by
}

"""
Boolean expression to filter rows from the table "payments". All fields are combined with a logical 'AND'.
"""
input payments_bool_exp {
  _and: [payments_bool_exp]
  _not: payments_bool_exp
  _or: [payments_bool_exp]
  application: applications_bool_exp
  application_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  key: String_comparison_exp
  mimetype: String_comparison_exp
  originalname: String_comparison_exp
  size: numeric_comparison_exp
}

"""
unique or primary key constraints on table "payments"
"""
enum payments_constraint {
  """unique or primary key constraint"""
  payments_application_id_key

  """unique or primary key constraint"""
  payments_pkey
}

"""
input type for incrementing integer column in table "payments"
"""
input payments_inc_input {
  size: numeric
}

"""
input type for inserting data into table "payments"
"""
input payments_insert_input {
  application: applications_obj_rel_insert_input
  application_id: uuid
  created_at: timestamptz
  id: uuid
  key: String
  mimetype: String
  originalname: String
  size: numeric
}

"""aggregate max on columns"""
type payments_max_fields {
  application_id: uuid
  created_at: timestamptz
  id: uuid
  key: String
  mimetype: String
  originalname: String
  size: numeric
}

"""
order by max() on columns of table "payments"
"""
input payments_max_order_by {
  application_id: order_by
  created_at: order_by
  id: order_by
  key: order_by
  mimetype: order_by
  originalname: order_by
  size: order_by
}

"""aggregate min on columns"""
type payments_min_fields {
  application_id: uuid
  created_at: timestamptz
  id: uuid
  key: String
  mimetype: String
  originalname: String
  size: numeric
}

"""
order by min() on columns of table "payments"
"""
input payments_min_order_by {
  application_id: order_by
  created_at: order_by
  id: order_by
  key: order_by
  mimetype: order_by
  originalname: order_by
  size: order_by
}

"""
response of any mutation on the table "payments"
"""
type payments_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [payments!]!
}

"""
input type for inserting object relation for remote table "payments"
"""
input payments_obj_rel_insert_input {
  data: payments_insert_input!
  on_conflict: payments_on_conflict
}

"""
on conflict condition type for table "payments"
"""
input payments_on_conflict {
  constraint: payments_constraint!
  update_columns: [payments_update_column!]!
  where: payments_bool_exp
}

"""
ordering options when selecting data from "payments"
"""
input payments_order_by {
  application: applications_order_by
  application_id: order_by
  created_at: order_by
  id: order_by
  key: order_by
  mimetype: order_by
  originalname: order_by
  size: order_by
}

"""
primary key columns input for table: "payments"
"""
input payments_pk_columns_input {
  id: uuid!
}

"""
select columns of table "payments"
"""
enum payments_select_column {
  """column name"""
  application_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  key

  """column name"""
  mimetype

  """column name"""
  originalname

  """column name"""
  size
}

"""
input type for updating data in table "payments"
"""
input payments_set_input {
  application_id: uuid
  created_at: timestamptz
  id: uuid
  key: String
  mimetype: String
  originalname: String
  size: numeric
}

"""aggregate stddev on columns"""
type payments_stddev_fields {
  size: Float
}

"""
order by stddev() on columns of table "payments"
"""
input payments_stddev_order_by {
  size: order_by
}

"""aggregate stddev_pop on columns"""
type payments_stddev_pop_fields {
  size: Float
}

"""
order by stddev_pop() on columns of table "payments"
"""
input payments_stddev_pop_order_by {
  size: order_by
}

"""aggregate stddev_samp on columns"""
type payments_stddev_samp_fields {
  size: Float
}

"""
order by stddev_samp() on columns of table "payments"
"""
input payments_stddev_samp_order_by {
  size: order_by
}

"""aggregate sum on columns"""
type payments_sum_fields {
  size: numeric
}

"""
order by sum() on columns of table "payments"
"""
input payments_sum_order_by {
  size: order_by
}

"""
update columns of table "payments"
"""
enum payments_update_column {
  """column name"""
  application_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  key

  """column name"""
  mimetype

  """column name"""
  originalname

  """column name"""
  size
}

"""aggregate var_pop on columns"""
type payments_var_pop_fields {
  size: Float
}

"""
order by var_pop() on columns of table "payments"
"""
input payments_var_pop_order_by {
  size: order_by
}

"""aggregate var_samp on columns"""
type payments_var_samp_fields {
  size: Float
}

"""
order by var_samp() on columns of table "payments"
"""
input payments_var_samp_order_by {
  size: order_by
}

"""aggregate variance on columns"""
type payments_variance_fields {
  size: Float
}

"""
order by variance() on columns of table "payments"
"""
input payments_variance_order_by {
  size: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "applications"
  """
  applications(
    """distinct select on columns"""
    distinct_on: [applications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [applications_order_by!]

    """filter the rows returned"""
    where: applications_bool_exp
  ): [applications!]!

  """
  fetch aggregated fields from the table: "applications"
  """
  applications_aggregate(
    """distinct select on columns"""
    distinct_on: [applications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [applications_order_by!]

    """filter the rows returned"""
    where: applications_bool_exp
  ): applications_aggregate!

  """fetch data from the table: "applications" using primary key columns"""
  applications_by_pk(id: uuid!): applications

  """
  fetch data from the table: "category_mediums"
  """
  category_mediums(
    """distinct select on columns"""
    distinct_on: [category_mediums_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_mediums_order_by!]

    """filter the rows returned"""
    where: category_mediums_bool_exp
  ): [category_mediums!]!

  """
  fetch aggregated fields from the table: "category_mediums"
  """
  category_mediums_aggregate(
    """distinct select on columns"""
    distinct_on: [category_mediums_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_mediums_order_by!]

    """filter the rows returned"""
    where: category_mediums_bool_exp
  ): category_mediums_aggregate!

  """
  fetch data from the table: "category_mediums" using primary key columns
  """
  category_mediums_by_pk(id: uuid!): category_mediums

  """
  fetch data from the table: "category_tags"
  """
  category_tags(
    """distinct select on columns"""
    distinct_on: [category_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_tags_order_by!]

    """filter the rows returned"""
    where: category_tags_bool_exp
  ): [category_tags!]!

  """
  fetch aggregated fields from the table: "category_tags"
  """
  category_tags_aggregate(
    """distinct select on columns"""
    distinct_on: [category_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_tags_order_by!]

    """filter the rows returned"""
    where: category_tags_bool_exp
  ): category_tags_aggregate!

  """fetch data from the table: "category_tags" using primary key columns"""
  category_tags_by_pk(id: uuid!): category_tags

  """
  fetch data from the table: "editions"
  """
  editions(
    """distinct select on columns"""
    distinct_on: [editions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [editions_order_by!]

    """filter the rows returned"""
    where: editions_bool_exp
  ): [editions!]!

  """
  fetch aggregated fields from the table: "editions"
  """
  editions_aggregate(
    """distinct select on columns"""
    distinct_on: [editions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [editions_order_by!]

    """filter the rows returned"""
    where: editions_bool_exp
  ): editions_aggregate!

  """fetch data from the table: "editions" using primary key columns"""
  editions_by_pk(id: Int!): editions

  """
  fetch data from the table: "eliminations"
  """
  eliminations(
    """distinct select on columns"""
    distinct_on: [eliminations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [eliminations_order_by!]

    """filter the rows returned"""
    where: eliminations_bool_exp
  ): [eliminations!]!

  """
  fetch aggregated fields from the table: "eliminations"
  """
  eliminations_aggregate(
    """distinct select on columns"""
    distinct_on: [eliminations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [eliminations_order_by!]

    """filter the rows returned"""
    where: eliminations_bool_exp
  ): eliminations_aggregate!

  """fetch data from the table: "eliminations" using primary key columns"""
  eliminations_by_pk(application_id: uuid!): eliminations

  """
  fetch data from the table: "messages"
  """
  messages(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]

    """filter the rows returned"""
    where: messages_bool_exp
  ): [messages!]!

  """
  fetch aggregated fields from the table: "messages"
  """
  messages_aggregate(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]

    """filter the rows returned"""
    where: messages_bool_exp
  ): messages_aggregate!

  """fetch data from the table: "messages" using primary key columns"""
  messages_by_pk(id: Int!): messages

  """
  fetch data from the table: "payments"
  """
  payments(
    """distinct select on columns"""
    distinct_on: [payments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [payments_order_by!]

    """filter the rows returned"""
    where: payments_bool_exp
  ): [payments!]!

  """
  fetch aggregated fields from the table: "payments"
  """
  payments_aggregate(
    """distinct select on columns"""
    distinct_on: [payments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [payments_order_by!]

    """filter the rows returned"""
    where: payments_bool_exp
  ): payments_aggregate!

  """fetch data from the table: "payments" using primary key columns"""
  payments_by_pk(id: uuid!): payments

  """
  fetch data from the table: "rating_rounds"
  """
  rating_rounds(
    """distinct select on columns"""
    distinct_on: [rating_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rating_rounds_order_by!]

    """filter the rows returned"""
    where: rating_rounds_bool_exp
  ): [rating_rounds!]!

  """
  fetch aggregated fields from the table: "rating_rounds"
  """
  rating_rounds_aggregate(
    """distinct select on columns"""
    distinct_on: [rating_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rating_rounds_order_by!]

    """filter the rows returned"""
    where: rating_rounds_bool_exp
  ): rating_rounds_aggregate!

  """fetch data from the table: "rating_rounds" using primary key columns"""
  rating_rounds_by_pk(id: Int!): rating_rounds

  """
  fetch data from the table: "rating_rounds_sorted"
  """
  rating_rounds_sorted(
    """distinct select on columns"""
    distinct_on: [rating_rounds_sorted_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rating_rounds_sorted_order_by!]

    """filter the rows returned"""
    where: rating_rounds_sorted_bool_exp
  ): [rating_rounds_sorted!]!

  """
  fetch aggregated fields from the table: "rating_rounds_sorted"
  """
  rating_rounds_sorted_aggregate(
    """distinct select on columns"""
    distinct_on: [rating_rounds_sorted_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rating_rounds_sorted_order_by!]

    """filter the rows returned"""
    where: rating_rounds_sorted_bool_exp
  ): rating_rounds_sorted_aggregate!

  """
  fetch data from the table: "ratings"
  """
  ratings(
    """distinct select on columns"""
    distinct_on: [ratings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ratings_order_by!]

    """filter the rows returned"""
    where: ratings_bool_exp
  ): [ratings!]!

  """
  fetch aggregated fields from the table: "ratings"
  """
  ratings_aggregate(
    """distinct select on columns"""
    distinct_on: [ratings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ratings_order_by!]

    """filter the rows returned"""
    where: ratings_bool_exp
  ): ratings_aggregate!

  """
  fetch data from the table: "ratings_by_application"
  """
  ratings_by_application(
    """distinct select on columns"""
    distinct_on: [ratings_by_application_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ratings_by_application_order_by!]

    """filter the rows returned"""
    where: ratings_by_application_bool_exp
  ): [ratings_by_application!]!

  """
  fetch aggregated fields from the table: "ratings_by_application"
  """
  ratings_by_application_aggregate(
    """distinct select on columns"""
    distinct_on: [ratings_by_application_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ratings_by_application_order_by!]

    """filter the rows returned"""
    where: ratings_by_application_bool_exp
  ): ratings_by_application_aggregate!

  """fetch data from the table: "ratings" using primary key columns"""
  ratings_by_pk(id: uuid!): ratings

  """
  execute function "search_applications" which returns "applications"
  """
  search_applications(
    """
    input parameters for function "search_applications"
    """
    args: search_applications_args!

    """distinct select on columns"""
    distinct_on: [applications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [applications_order_by!]

    """filter the rows returned"""
    where: applications_bool_exp
  ): [applications!]!

  """
  execute function "search_applications" and query aggregates on result of table type "applications"
  """
  search_applications_aggregate(
    """
    input parameters for function "search_applications"
    """
    args: search_applications_args!

    """distinct select on columns"""
    distinct_on: [applications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [applications_order_by!]

    """filter the rows returned"""
    where: applications_bool_exp
  ): applications_aggregate!

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: String!): users

  """
  fetch data from the table: "users_online"
  """
  users_online(
    """distinct select on columns"""
    distinct_on: [users_online_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_online_order_by!]

    """filter the rows returned"""
    where: users_online_bool_exp
  ): [users_online!]!

  """
  fetch aggregated fields from the table: "users_online"
  """
  users_online_aggregate(
    """distinct select on columns"""
    distinct_on: [users_online_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_online_order_by!]

    """filter the rows returned"""
    where: users_online_bool_exp
  ): users_online_aggregate!

  """
  fetch data from the table: "wordlist"
  """
  wordlist(
    """distinct select on columns"""
    distinct_on: [wordlist_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wordlist_order_by!]

    """filter the rows returned"""
    where: wordlist_bool_exp
  ): [wordlist!]!

  """
  fetch aggregated fields from the table: "wordlist"
  """
  wordlist_aggregate(
    """distinct select on columns"""
    distinct_on: [wordlist_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wordlist_order_by!]

    """filter the rows returned"""
    where: wordlist_bool_exp
  ): wordlist_aggregate!

  """fetch data from the table: "wordlist" using primary key columns"""
  wordlist_by_pk(id: Int!): wordlist

  """
  fetch data from the table: "work_files"
  """
  work_files(
    """distinct select on columns"""
    distinct_on: [work_files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_files_order_by!]

    """filter the rows returned"""
    where: work_files_bool_exp
  ): [work_files!]!

  """
  fetch aggregated fields from the table: "work_files"
  """
  work_files_aggregate(
    """distinct select on columns"""
    distinct_on: [work_files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_files_order_by!]

    """filter the rows returned"""
    where: work_files_bool_exp
  ): work_files_aggregate!

  """fetch data from the table: "work_files" using primary key columns"""
  work_files_by_pk(id: uuid!): work_files

  """
  fetch data from the table: "work_specification_mediums"
  """
  work_specification_mediums(
    """distinct select on columns"""
    distinct_on: [work_specification_mediums_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specification_mediums_order_by!]

    """filter the rows returned"""
    where: work_specification_mediums_bool_exp
  ): [work_specification_mediums!]!

  """
  fetch aggregated fields from the table: "work_specification_mediums"
  """
  work_specification_mediums_aggregate(
    """distinct select on columns"""
    distinct_on: [work_specification_mediums_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specification_mediums_order_by!]

    """filter the rows returned"""
    where: work_specification_mediums_bool_exp
  ): work_specification_mediums_aggregate!

  """
  fetch data from the table: "work_specification_mediums" using primary key columns
  """
  work_specification_mediums_by_pk(medium_id: uuid!, specification_id: uuid!): work_specification_mediums

  """
  fetch data from the table: "work_specification_tags"
  """
  work_specification_tags(
    """distinct select on columns"""
    distinct_on: [work_specification_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specification_tags_order_by!]

    """filter the rows returned"""
    where: work_specification_tags_bool_exp
  ): [work_specification_tags!]!

  """
  fetch aggregated fields from the table: "work_specification_tags"
  """
  work_specification_tags_aggregate(
    """distinct select on columns"""
    distinct_on: [work_specification_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specification_tags_order_by!]

    """filter the rows returned"""
    where: work_specification_tags_bool_exp
  ): work_specification_tags_aggregate!

  """
  fetch data from the table: "work_specification_tags" using primary key columns
  """
  work_specification_tags_by_pk(specification_id: uuid!, tag_id: uuid!): work_specification_tags

  """
  fetch data from the table: "work_specifications"
  """
  work_specifications(
    """distinct select on columns"""
    distinct_on: [work_specifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specifications_order_by!]

    """filter the rows returned"""
    where: work_specifications_bool_exp
  ): [work_specifications!]!

  """
  fetch aggregated fields from the table: "work_specifications"
  """
  work_specifications_aggregate(
    """distinct select on columns"""
    distinct_on: [work_specifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specifications_order_by!]

    """filter the rows returned"""
    where: work_specifications_bool_exp
  ): work_specifications_aggregate!

  """
  fetch data from the table: "work_specifications" using primary key columns
  """
  work_specifications_by_pk(id: uuid!): work_specifications

  """
  fetch data from the table: "works"
  """
  works(
    """distinct select on columns"""
    distinct_on: [works_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [works_order_by!]

    """filter the rows returned"""
    where: works_bool_exp
  ): [works!]!

  """
  fetch aggregated fields from the table: "works"
  """
  works_aggregate(
    """distinct select on columns"""
    distinct_on: [works_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [works_order_by!]

    """filter the rows returned"""
    where: works_bool_exp
  ): works_aggregate!

  """fetch data from the table: "works" using primary key columns"""
  works_by_pk(id: uuid!): works
}

"""
columns and relationships of "rating_rounds"
"""
type rating_rounds {
  """
  A computed field, executes function "rating_round_state"
  """
  active: Boolean
  created_at: timestamptz

  """An object relationship"""
  edition: editions!
  edition_id: Int!
  end_at: timestamptz!
  goal: Int!
  id: Int!

  """An object relationship"""
  next_round: rating_rounds

  """An object relationship"""
  prev_round: rating_rounds
  prev_round_id: Int

  """An array relationship"""
  ratings(
    """distinct select on columns"""
    distinct_on: [ratings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ratings_order_by!]

    """filter the rows returned"""
    where: ratings_bool_exp
  ): [ratings!]!

  """An aggregated array relationship"""
  ratings_aggregate(
    """distinct select on columns"""
    distinct_on: [ratings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ratings_order_by!]

    """filter the rows returned"""
    where: ratings_bool_exp
  ): ratings_aggregate!
  start_at: timestamptz!
  updated_at: timestamptz
}

"""
aggregated selection of "rating_rounds"
"""
type rating_rounds_aggregate {
  aggregate: rating_rounds_aggregate_fields
  nodes: [rating_rounds!]!
}

"""
aggregate fields of "rating_rounds"
"""
type rating_rounds_aggregate_fields {
  avg: rating_rounds_avg_fields
  count(columns: [rating_rounds_select_column!], distinct: Boolean): Int
  max: rating_rounds_max_fields
  min: rating_rounds_min_fields
  stddev: rating_rounds_stddev_fields
  stddev_pop: rating_rounds_stddev_pop_fields
  stddev_samp: rating_rounds_stddev_samp_fields
  sum: rating_rounds_sum_fields
  var_pop: rating_rounds_var_pop_fields
  var_samp: rating_rounds_var_samp_fields
  variance: rating_rounds_variance_fields
}

"""
order by aggregate values of table "rating_rounds"
"""
input rating_rounds_aggregate_order_by {
  avg: rating_rounds_avg_order_by
  count: order_by
  max: rating_rounds_max_order_by
  min: rating_rounds_min_order_by
  stddev: rating_rounds_stddev_order_by
  stddev_pop: rating_rounds_stddev_pop_order_by
  stddev_samp: rating_rounds_stddev_samp_order_by
  sum: rating_rounds_sum_order_by
  var_pop: rating_rounds_var_pop_order_by
  var_samp: rating_rounds_var_samp_order_by
  variance: rating_rounds_variance_order_by
}

"""
input type for inserting array relation for remote table "rating_rounds"
"""
input rating_rounds_arr_rel_insert_input {
  data: [rating_rounds_insert_input!]!
  on_conflict: rating_rounds_on_conflict
}

"""aggregate avg on columns"""
type rating_rounds_avg_fields {
  edition_id: Float
  goal: Float
  id: Float
  prev_round_id: Float
}

"""
order by avg() on columns of table "rating_rounds"
"""
input rating_rounds_avg_order_by {
  edition_id: order_by
  goal: order_by
  id: order_by
  prev_round_id: order_by
}

"""
Boolean expression to filter rows from the table "rating_rounds". All fields are combined with a logical 'AND'.
"""
input rating_rounds_bool_exp {
  _and: [rating_rounds_bool_exp]
  _not: rating_rounds_bool_exp
  _or: [rating_rounds_bool_exp]
  created_at: timestamptz_comparison_exp
  edition: editions_bool_exp
  edition_id: Int_comparison_exp
  end_at: timestamptz_comparison_exp
  goal: Int_comparison_exp
  id: Int_comparison_exp
  next_round: rating_rounds_bool_exp
  prev_round: rating_rounds_bool_exp
  prev_round_id: Int_comparison_exp
  ratings: ratings_bool_exp
  start_at: timestamptz_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "rating_rounds"
"""
enum rating_rounds_constraint {
  """unique or primary key constraint"""
  rating_rounds_pkey

  """unique or primary key constraint"""
  rating_rounds_prev_round_id_key
}

"""
input type for incrementing integer column in table "rating_rounds"
"""
input rating_rounds_inc_input {
  edition_id: Int
  goal: Int
  id: Int
  prev_round_id: Int
}

"""
input type for inserting data into table "rating_rounds"
"""
input rating_rounds_insert_input {
  created_at: timestamptz
  edition: editions_obj_rel_insert_input
  edition_id: Int
  end_at: timestamptz
  goal: Int
  id: Int
  next_round: rating_rounds_obj_rel_insert_input
  prev_round: rating_rounds_obj_rel_insert_input
  prev_round_id: Int
  ratings: ratings_arr_rel_insert_input
  start_at: timestamptz
  updated_at: timestamptz
}

"""aggregate max on columns"""
type rating_rounds_max_fields {
  created_at: timestamptz
  edition_id: Int
  end_at: timestamptz
  goal: Int
  id: Int
  prev_round_id: Int
  start_at: timestamptz
  updated_at: timestamptz
}

"""
order by max() on columns of table "rating_rounds"
"""
input rating_rounds_max_order_by {
  created_at: order_by
  edition_id: order_by
  end_at: order_by
  goal: order_by
  id: order_by
  prev_round_id: order_by
  start_at: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type rating_rounds_min_fields {
  created_at: timestamptz
  edition_id: Int
  end_at: timestamptz
  goal: Int
  id: Int
  prev_round_id: Int
  start_at: timestamptz
  updated_at: timestamptz
}

"""
order by min() on columns of table "rating_rounds"
"""
input rating_rounds_min_order_by {
  created_at: order_by
  edition_id: order_by
  end_at: order_by
  goal: order_by
  id: order_by
  prev_round_id: order_by
  start_at: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "rating_rounds"
"""
type rating_rounds_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [rating_rounds!]!
}

"""
input type for inserting object relation for remote table "rating_rounds"
"""
input rating_rounds_obj_rel_insert_input {
  data: rating_rounds_insert_input!
  on_conflict: rating_rounds_on_conflict
}

"""
on conflict condition type for table "rating_rounds"
"""
input rating_rounds_on_conflict {
  constraint: rating_rounds_constraint!
  update_columns: [rating_rounds_update_column!]!
  where: rating_rounds_bool_exp
}

"""
ordering options when selecting data from "rating_rounds"
"""
input rating_rounds_order_by {
  created_at: order_by
  edition: editions_order_by
  edition_id: order_by
  end_at: order_by
  goal: order_by
  id: order_by
  next_round: rating_rounds_order_by
  prev_round: rating_rounds_order_by
  prev_round_id: order_by
  ratings_aggregate: ratings_aggregate_order_by
  start_at: order_by
  updated_at: order_by
}

"""
primary key columns input for table: "rating_rounds"
"""
input rating_rounds_pk_columns_input {
  id: Int!
}

"""
select columns of table "rating_rounds"
"""
enum rating_rounds_select_column {
  """column name"""
  created_at

  """column name"""
  edition_id

  """column name"""
  end_at

  """column name"""
  goal

  """column name"""
  id

  """column name"""
  prev_round_id

  """column name"""
  start_at

  """column name"""
  updated_at
}

"""
input type for updating data in table "rating_rounds"
"""
input rating_rounds_set_input {
  created_at: timestamptz
  edition_id: Int
  end_at: timestamptz
  goal: Int
  id: Int
  prev_round_id: Int
  start_at: timestamptz
  updated_at: timestamptz
}

"""
columns and relationships of "rating_rounds_sorted"
"""
type rating_rounds_sorted {
  edition_id: Int
  end_at: timestamptz
  goal: Int
  id: Int
  level: Int
  prev_round_id: Int
  start_at: timestamptz
}

"""
aggregated selection of "rating_rounds_sorted"
"""
type rating_rounds_sorted_aggregate {
  aggregate: rating_rounds_sorted_aggregate_fields
  nodes: [rating_rounds_sorted!]!
}

"""
aggregate fields of "rating_rounds_sorted"
"""
type rating_rounds_sorted_aggregate_fields {
  avg: rating_rounds_sorted_avg_fields
  count(columns: [rating_rounds_sorted_select_column!], distinct: Boolean): Int
  max: rating_rounds_sorted_max_fields
  min: rating_rounds_sorted_min_fields
  stddev: rating_rounds_sorted_stddev_fields
  stddev_pop: rating_rounds_sorted_stddev_pop_fields
  stddev_samp: rating_rounds_sorted_stddev_samp_fields
  sum: rating_rounds_sorted_sum_fields
  var_pop: rating_rounds_sorted_var_pop_fields
  var_samp: rating_rounds_sorted_var_samp_fields
  variance: rating_rounds_sorted_variance_fields
}

"""
order by aggregate values of table "rating_rounds_sorted"
"""
input rating_rounds_sorted_aggregate_order_by {
  avg: rating_rounds_sorted_avg_order_by
  count: order_by
  max: rating_rounds_sorted_max_order_by
  min: rating_rounds_sorted_min_order_by
  stddev: rating_rounds_sorted_stddev_order_by
  stddev_pop: rating_rounds_sorted_stddev_pop_order_by
  stddev_samp: rating_rounds_sorted_stddev_samp_order_by
  sum: rating_rounds_sorted_sum_order_by
  var_pop: rating_rounds_sorted_var_pop_order_by
  var_samp: rating_rounds_sorted_var_samp_order_by
  variance: rating_rounds_sorted_variance_order_by
}

"""aggregate avg on columns"""
type rating_rounds_sorted_avg_fields {
  edition_id: Float
  goal: Float
  id: Float
  level: Float
  prev_round_id: Float
}

"""
order by avg() on columns of table "rating_rounds_sorted"
"""
input rating_rounds_sorted_avg_order_by {
  edition_id: order_by
  goal: order_by
  id: order_by
  level: order_by
  prev_round_id: order_by
}

"""
Boolean expression to filter rows from the table "rating_rounds_sorted". All fields are combined with a logical 'AND'.
"""
input rating_rounds_sorted_bool_exp {
  _and: [rating_rounds_sorted_bool_exp]
  _not: rating_rounds_sorted_bool_exp
  _or: [rating_rounds_sorted_bool_exp]
  edition_id: Int_comparison_exp
  end_at: timestamptz_comparison_exp
  goal: Int_comparison_exp
  id: Int_comparison_exp
  level: Int_comparison_exp
  prev_round_id: Int_comparison_exp
  start_at: timestamptz_comparison_exp
}

"""aggregate max on columns"""
type rating_rounds_sorted_max_fields {
  edition_id: Int
  end_at: timestamptz
  goal: Int
  id: Int
  level: Int
  prev_round_id: Int
  start_at: timestamptz
}

"""
order by max() on columns of table "rating_rounds_sorted"
"""
input rating_rounds_sorted_max_order_by {
  edition_id: order_by
  end_at: order_by
  goal: order_by
  id: order_by
  level: order_by
  prev_round_id: order_by
  start_at: order_by
}

"""aggregate min on columns"""
type rating_rounds_sorted_min_fields {
  edition_id: Int
  end_at: timestamptz
  goal: Int
  id: Int
  level: Int
  prev_round_id: Int
  start_at: timestamptz
}

"""
order by min() on columns of table "rating_rounds_sorted"
"""
input rating_rounds_sorted_min_order_by {
  edition_id: order_by
  end_at: order_by
  goal: order_by
  id: order_by
  level: order_by
  prev_round_id: order_by
  start_at: order_by
}

"""
ordering options when selecting data from "rating_rounds_sorted"
"""
input rating_rounds_sorted_order_by {
  edition_id: order_by
  end_at: order_by
  goal: order_by
  id: order_by
  level: order_by
  prev_round_id: order_by
  start_at: order_by
}

"""
select columns of table "rating_rounds_sorted"
"""
enum rating_rounds_sorted_select_column {
  """column name"""
  edition_id

  """column name"""
  end_at

  """column name"""
  goal

  """column name"""
  id

  """column name"""
  level

  """column name"""
  prev_round_id

  """column name"""
  start_at
}

"""aggregate stddev on columns"""
type rating_rounds_sorted_stddev_fields {
  edition_id: Float
  goal: Float
  id: Float
  level: Float
  prev_round_id: Float
}

"""
order by stddev() on columns of table "rating_rounds_sorted"
"""
input rating_rounds_sorted_stddev_order_by {
  edition_id: order_by
  goal: order_by
  id: order_by
  level: order_by
  prev_round_id: order_by
}

"""aggregate stddev_pop on columns"""
type rating_rounds_sorted_stddev_pop_fields {
  edition_id: Float
  goal: Float
  id: Float
  level: Float
  prev_round_id: Float
}

"""
order by stddev_pop() on columns of table "rating_rounds_sorted"
"""
input rating_rounds_sorted_stddev_pop_order_by {
  edition_id: order_by
  goal: order_by
  id: order_by
  level: order_by
  prev_round_id: order_by
}

"""aggregate stddev_samp on columns"""
type rating_rounds_sorted_stddev_samp_fields {
  edition_id: Float
  goal: Float
  id: Float
  level: Float
  prev_round_id: Float
}

"""
order by stddev_samp() on columns of table "rating_rounds_sorted"
"""
input rating_rounds_sorted_stddev_samp_order_by {
  edition_id: order_by
  goal: order_by
  id: order_by
  level: order_by
  prev_round_id: order_by
}

"""aggregate sum on columns"""
type rating_rounds_sorted_sum_fields {
  edition_id: Int
  goal: Int
  id: Int
  level: Int
  prev_round_id: Int
}

"""
order by sum() on columns of table "rating_rounds_sorted"
"""
input rating_rounds_sorted_sum_order_by {
  edition_id: order_by
  goal: order_by
  id: order_by
  level: order_by
  prev_round_id: order_by
}

"""aggregate var_pop on columns"""
type rating_rounds_sorted_var_pop_fields {
  edition_id: Float
  goal: Float
  id: Float
  level: Float
  prev_round_id: Float
}

"""
order by var_pop() on columns of table "rating_rounds_sorted"
"""
input rating_rounds_sorted_var_pop_order_by {
  edition_id: order_by
  goal: order_by
  id: order_by
  level: order_by
  prev_round_id: order_by
}

"""aggregate var_samp on columns"""
type rating_rounds_sorted_var_samp_fields {
  edition_id: Float
  goal: Float
  id: Float
  level: Float
  prev_round_id: Float
}

"""
order by var_samp() on columns of table "rating_rounds_sorted"
"""
input rating_rounds_sorted_var_samp_order_by {
  edition_id: order_by
  goal: order_by
  id: order_by
  level: order_by
  prev_round_id: order_by
}

"""aggregate variance on columns"""
type rating_rounds_sorted_variance_fields {
  edition_id: Float
  goal: Float
  id: Float
  level: Float
  prev_round_id: Float
}

"""
order by variance() on columns of table "rating_rounds_sorted"
"""
input rating_rounds_sorted_variance_order_by {
  edition_id: order_by
  goal: order_by
  id: order_by
  level: order_by
  prev_round_id: order_by
}

"""aggregate stddev on columns"""
type rating_rounds_stddev_fields {
  edition_id: Float
  goal: Float
  id: Float
  prev_round_id: Float
}

"""
order by stddev() on columns of table "rating_rounds"
"""
input rating_rounds_stddev_order_by {
  edition_id: order_by
  goal: order_by
  id: order_by
  prev_round_id: order_by
}

"""aggregate stddev_pop on columns"""
type rating_rounds_stddev_pop_fields {
  edition_id: Float
  goal: Float
  id: Float
  prev_round_id: Float
}

"""
order by stddev_pop() on columns of table "rating_rounds"
"""
input rating_rounds_stddev_pop_order_by {
  edition_id: order_by
  goal: order_by
  id: order_by
  prev_round_id: order_by
}

"""aggregate stddev_samp on columns"""
type rating_rounds_stddev_samp_fields {
  edition_id: Float
  goal: Float
  id: Float
  prev_round_id: Float
}

"""
order by stddev_samp() on columns of table "rating_rounds"
"""
input rating_rounds_stddev_samp_order_by {
  edition_id: order_by
  goal: order_by
  id: order_by
  prev_round_id: order_by
}

"""aggregate sum on columns"""
type rating_rounds_sum_fields {
  edition_id: Int
  goal: Int
  id: Int
  prev_round_id: Int
}

"""
order by sum() on columns of table "rating_rounds"
"""
input rating_rounds_sum_order_by {
  edition_id: order_by
  goal: order_by
  id: order_by
  prev_round_id: order_by
}

"""
update columns of table "rating_rounds"
"""
enum rating_rounds_update_column {
  """column name"""
  created_at

  """column name"""
  edition_id

  """column name"""
  end_at

  """column name"""
  goal

  """column name"""
  id

  """column name"""
  prev_round_id

  """column name"""
  start_at

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type rating_rounds_var_pop_fields {
  edition_id: Float
  goal: Float
  id: Float
  prev_round_id: Float
}

"""
order by var_pop() on columns of table "rating_rounds"
"""
input rating_rounds_var_pop_order_by {
  edition_id: order_by
  goal: order_by
  id: order_by
  prev_round_id: order_by
}

"""aggregate var_samp on columns"""
type rating_rounds_var_samp_fields {
  edition_id: Float
  goal: Float
  id: Float
  prev_round_id: Float
}

"""
order by var_samp() on columns of table "rating_rounds"
"""
input rating_rounds_var_samp_order_by {
  edition_id: order_by
  goal: order_by
  id: order_by
  prev_round_id: order_by
}

"""aggregate variance on columns"""
type rating_rounds_variance_fields {
  edition_id: Float
  goal: Float
  id: Float
  prev_round_id: Float
}

"""
order by variance() on columns of table "rating_rounds"
"""
input rating_rounds_variance_order_by {
  edition_id: order_by
  goal: order_by
  id: order_by
  prev_round_id: order_by
}

"""
columns and relationships of "ratings"
"""
type ratings {
  """An object relationship"""
  application: applications!
  application_id: uuid!
  created_at: timestamptz!
  created_by: String!
  id: uuid!

  """An object relationship"""
  message: messages!
  message_id: Int!

  """An object relationship"""
  rating_round: rating_rounds!
  round_id: Int!
  updated_at: timestamptz!
  value: Int!
}

"""
aggregated selection of "ratings"
"""
type ratings_aggregate {
  aggregate: ratings_aggregate_fields
  nodes: [ratings!]!
}

"""
aggregate fields of "ratings"
"""
type ratings_aggregate_fields {
  avg: ratings_avg_fields
  count(columns: [ratings_select_column!], distinct: Boolean): Int
  max: ratings_max_fields
  min: ratings_min_fields
  stddev: ratings_stddev_fields
  stddev_pop: ratings_stddev_pop_fields
  stddev_samp: ratings_stddev_samp_fields
  sum: ratings_sum_fields
  var_pop: ratings_var_pop_fields
  var_samp: ratings_var_samp_fields
  variance: ratings_variance_fields
}

"""
order by aggregate values of table "ratings"
"""
input ratings_aggregate_order_by {
  avg: ratings_avg_order_by
  count: order_by
  max: ratings_max_order_by
  min: ratings_min_order_by
  stddev: ratings_stddev_order_by
  stddev_pop: ratings_stddev_pop_order_by
  stddev_samp: ratings_stddev_samp_order_by
  sum: ratings_sum_order_by
  var_pop: ratings_var_pop_order_by
  var_samp: ratings_var_samp_order_by
  variance: ratings_variance_order_by
}

"""
input type for inserting array relation for remote table "ratings"
"""
input ratings_arr_rel_insert_input {
  data: [ratings_insert_input!]!
  on_conflict: ratings_on_conflict
}

"""aggregate avg on columns"""
type ratings_avg_fields {
  message_id: Float
  round_id: Float
  value: Float
}

"""
order by avg() on columns of table "ratings"
"""
input ratings_avg_order_by {
  message_id: order_by
  round_id: order_by
  value: order_by
}

"""
Boolean expression to filter rows from the table "ratings". All fields are combined with a logical 'AND'.
"""
input ratings_bool_exp {
  _and: [ratings_bool_exp]
  _not: ratings_bool_exp
  _or: [ratings_bool_exp]
  application: applications_bool_exp
  application_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  created_by: String_comparison_exp
  id: uuid_comparison_exp
  message: messages_bool_exp
  message_id: Int_comparison_exp
  rating_round: rating_rounds_bool_exp
  round_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  value: Int_comparison_exp
}

"""
columns and relationships of "ratings_by_application"
"""
type ratings_by_application {
  """An object relationship"""
  application: applications
  avg: numeric
  avg_total: numeric
  count: bigint

  """An object relationship"""
  edition: editions
  edition_id: Int
  id: uuid

  """An object relationship"""
  rating_round: rating_rounds
  round_id: Int
}

"""
aggregated selection of "ratings_by_application"
"""
type ratings_by_application_aggregate {
  aggregate: ratings_by_application_aggregate_fields
  nodes: [ratings_by_application!]!
}

"""
aggregate fields of "ratings_by_application"
"""
type ratings_by_application_aggregate_fields {
  avg: ratings_by_application_avg_fields
  count(columns: [ratings_by_application_select_column!], distinct: Boolean): Int
  max: ratings_by_application_max_fields
  min: ratings_by_application_min_fields
  stddev: ratings_by_application_stddev_fields
  stddev_pop: ratings_by_application_stddev_pop_fields
  stddev_samp: ratings_by_application_stddev_samp_fields
  sum: ratings_by_application_sum_fields
  var_pop: ratings_by_application_var_pop_fields
  var_samp: ratings_by_application_var_samp_fields
  variance: ratings_by_application_variance_fields
}

"""
order by aggregate values of table "ratings_by_application"
"""
input ratings_by_application_aggregate_order_by {
  avg: ratings_by_application_avg_order_by
  count: order_by
  max: ratings_by_application_max_order_by
  min: ratings_by_application_min_order_by
  stddev: ratings_by_application_stddev_order_by
  stddev_pop: ratings_by_application_stddev_pop_order_by
  stddev_samp: ratings_by_application_stddev_samp_order_by
  sum: ratings_by_application_sum_order_by
  var_pop: ratings_by_application_var_pop_order_by
  var_samp: ratings_by_application_var_samp_order_by
  variance: ratings_by_application_variance_order_by
}

"""aggregate avg on columns"""
type ratings_by_application_avg_fields {
  avg: Float
  avg_total: Float
  count: Float
  edition_id: Float
  round_id: Float
}

"""
order by avg() on columns of table "ratings_by_application"
"""
input ratings_by_application_avg_order_by {
  avg: order_by
  avg_total: order_by
  count: order_by
  edition_id: order_by
  round_id: order_by
}

"""
Boolean expression to filter rows from the table "ratings_by_application". All fields are combined with a logical 'AND'.
"""
input ratings_by_application_bool_exp {
  _and: [ratings_by_application_bool_exp]
  _not: ratings_by_application_bool_exp
  _or: [ratings_by_application_bool_exp]
  application: applications_bool_exp
  avg: numeric_comparison_exp
  avg_total: numeric_comparison_exp
  count: bigint_comparison_exp
  edition: editions_bool_exp
  edition_id: Int_comparison_exp
  id: uuid_comparison_exp
  rating_round: rating_rounds_bool_exp
  round_id: Int_comparison_exp
}

"""aggregate max on columns"""
type ratings_by_application_max_fields {
  avg: numeric
  avg_total: numeric
  count: bigint
  edition_id: Int
  id: uuid
  round_id: Int
}

"""
order by max() on columns of table "ratings_by_application"
"""
input ratings_by_application_max_order_by {
  avg: order_by
  avg_total: order_by
  count: order_by
  edition_id: order_by
  id: order_by
  round_id: order_by
}

"""aggregate min on columns"""
type ratings_by_application_min_fields {
  avg: numeric
  avg_total: numeric
  count: bigint
  edition_id: Int
  id: uuid
  round_id: Int
}

"""
order by min() on columns of table "ratings_by_application"
"""
input ratings_by_application_min_order_by {
  avg: order_by
  avg_total: order_by
  count: order_by
  edition_id: order_by
  id: order_by
  round_id: order_by
}

"""
ordering options when selecting data from "ratings_by_application"
"""
input ratings_by_application_order_by {
  application: applications_order_by
  avg: order_by
  avg_total: order_by
  count: order_by
  edition: editions_order_by
  edition_id: order_by
  id: order_by
  rating_round: rating_rounds_order_by
  round_id: order_by
}

"""
select columns of table "ratings_by_application"
"""
enum ratings_by_application_select_column {
  """column name"""
  avg

  """column name"""
  avg_total

  """column name"""
  count

  """column name"""
  edition_id

  """column name"""
  id

  """column name"""
  round_id
}

"""aggregate stddev on columns"""
type ratings_by_application_stddev_fields {
  avg: Float
  avg_total: Float
  count: Float
  edition_id: Float
  round_id: Float
}

"""
order by stddev() on columns of table "ratings_by_application"
"""
input ratings_by_application_stddev_order_by {
  avg: order_by
  avg_total: order_by
  count: order_by
  edition_id: order_by
  round_id: order_by
}

"""aggregate stddev_pop on columns"""
type ratings_by_application_stddev_pop_fields {
  avg: Float
  avg_total: Float
  count: Float
  edition_id: Float
  round_id: Float
}

"""
order by stddev_pop() on columns of table "ratings_by_application"
"""
input ratings_by_application_stddev_pop_order_by {
  avg: order_by
  avg_total: order_by
  count: order_by
  edition_id: order_by
  round_id: order_by
}

"""aggregate stddev_samp on columns"""
type ratings_by_application_stddev_samp_fields {
  avg: Float
  avg_total: Float
  count: Float
  edition_id: Float
  round_id: Float
}

"""
order by stddev_samp() on columns of table "ratings_by_application"
"""
input ratings_by_application_stddev_samp_order_by {
  avg: order_by
  avg_total: order_by
  count: order_by
  edition_id: order_by
  round_id: order_by
}

"""aggregate sum on columns"""
type ratings_by_application_sum_fields {
  avg: numeric
  avg_total: numeric
  count: bigint
  edition_id: Int
  round_id: Int
}

"""
order by sum() on columns of table "ratings_by_application"
"""
input ratings_by_application_sum_order_by {
  avg: order_by
  avg_total: order_by
  count: order_by
  edition_id: order_by
  round_id: order_by
}

"""aggregate var_pop on columns"""
type ratings_by_application_var_pop_fields {
  avg: Float
  avg_total: Float
  count: Float
  edition_id: Float
  round_id: Float
}

"""
order by var_pop() on columns of table "ratings_by_application"
"""
input ratings_by_application_var_pop_order_by {
  avg: order_by
  avg_total: order_by
  count: order_by
  edition_id: order_by
  round_id: order_by
}

"""aggregate var_samp on columns"""
type ratings_by_application_var_samp_fields {
  avg: Float
  avg_total: Float
  count: Float
  edition_id: Float
  round_id: Float
}

"""
order by var_samp() on columns of table "ratings_by_application"
"""
input ratings_by_application_var_samp_order_by {
  avg: order_by
  avg_total: order_by
  count: order_by
  edition_id: order_by
  round_id: order_by
}

"""aggregate variance on columns"""
type ratings_by_application_variance_fields {
  avg: Float
  avg_total: Float
  count: Float
  edition_id: Float
  round_id: Float
}

"""
order by variance() on columns of table "ratings_by_application"
"""
input ratings_by_application_variance_order_by {
  avg: order_by
  avg_total: order_by
  count: order_by
  edition_id: order_by
  round_id: order_by
}

"""
unique or primary key constraints on table "ratings"
"""
enum ratings_constraint {
  """unique or primary key constraint"""
  ratings_message_id_key

  """unique or primary key constraint"""
  ratings_pkey

  """unique or primary key constraint"""
  ratings_round_id_application_id_created_by_key
}

"""
input type for incrementing integer column in table "ratings"
"""
input ratings_inc_input {
  message_id: Int
  round_id: Int
  value: Int
}

"""
input type for inserting data into table "ratings"
"""
input ratings_insert_input {
  application: applications_obj_rel_insert_input
  application_id: uuid
  created_at: timestamptz
  created_by: String
  id: uuid
  message: messages_obj_rel_insert_input
  message_id: Int
  rating_round: rating_rounds_obj_rel_insert_input
  round_id: Int
  updated_at: timestamptz
  value: Int
}

"""aggregate max on columns"""
type ratings_max_fields {
  application_id: uuid
  created_at: timestamptz
  created_by: String
  id: uuid
  message_id: Int
  round_id: Int
  updated_at: timestamptz
  value: Int
}

"""
order by max() on columns of table "ratings"
"""
input ratings_max_order_by {
  application_id: order_by
  created_at: order_by
  created_by: order_by
  id: order_by
  message_id: order_by
  round_id: order_by
  updated_at: order_by
  value: order_by
}

"""aggregate min on columns"""
type ratings_min_fields {
  application_id: uuid
  created_at: timestamptz
  created_by: String
  id: uuid
  message_id: Int
  round_id: Int
  updated_at: timestamptz
  value: Int
}

"""
order by min() on columns of table "ratings"
"""
input ratings_min_order_by {
  application_id: order_by
  created_at: order_by
  created_by: order_by
  id: order_by
  message_id: order_by
  round_id: order_by
  updated_at: order_by
  value: order_by
}

"""
response of any mutation on the table "ratings"
"""
type ratings_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [ratings!]!
}

"""
input type for inserting object relation for remote table "ratings"
"""
input ratings_obj_rel_insert_input {
  data: ratings_insert_input!
  on_conflict: ratings_on_conflict
}

"""
on conflict condition type for table "ratings"
"""
input ratings_on_conflict {
  constraint: ratings_constraint!
  update_columns: [ratings_update_column!]!
  where: ratings_bool_exp
}

"""
ordering options when selecting data from "ratings"
"""
input ratings_order_by {
  application: applications_order_by
  application_id: order_by
  created_at: order_by
  created_by: order_by
  id: order_by
  message: messages_order_by
  message_id: order_by
  rating_round: rating_rounds_order_by
  round_id: order_by
  updated_at: order_by
  value: order_by
}

"""
primary key columns input for table: "ratings"
"""
input ratings_pk_columns_input {
  id: uuid!
}

"""
select columns of table "ratings"
"""
enum ratings_select_column {
  """column name"""
  application_id

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  id

  """column name"""
  message_id

  """column name"""
  round_id

  """column name"""
  updated_at

  """column name"""
  value
}

"""
input type for updating data in table "ratings"
"""
input ratings_set_input {
  application_id: uuid
  created_at: timestamptz
  created_by: String
  id: uuid
  message_id: Int
  round_id: Int
  updated_at: timestamptz
  value: Int
}

"""aggregate stddev on columns"""
type ratings_stddev_fields {
  message_id: Float
  round_id: Float
  value: Float
}

"""
order by stddev() on columns of table "ratings"
"""
input ratings_stddev_order_by {
  message_id: order_by
  round_id: order_by
  value: order_by
}

"""aggregate stddev_pop on columns"""
type ratings_stddev_pop_fields {
  message_id: Float
  round_id: Float
  value: Float
}

"""
order by stddev_pop() on columns of table "ratings"
"""
input ratings_stddev_pop_order_by {
  message_id: order_by
  round_id: order_by
  value: order_by
}

"""aggregate stddev_samp on columns"""
type ratings_stddev_samp_fields {
  message_id: Float
  round_id: Float
  value: Float
}

"""
order by stddev_samp() on columns of table "ratings"
"""
input ratings_stddev_samp_order_by {
  message_id: order_by
  round_id: order_by
  value: order_by
}

"""aggregate sum on columns"""
type ratings_sum_fields {
  message_id: Int
  round_id: Int
  value: Int
}

"""
order by sum() on columns of table "ratings"
"""
input ratings_sum_order_by {
  message_id: order_by
  round_id: order_by
  value: order_by
}

"""
update columns of table "ratings"
"""
enum ratings_update_column {
  """column name"""
  application_id

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  id

  """column name"""
  message_id

  """column name"""
  round_id

  """column name"""
  updated_at

  """column name"""
  value
}

"""aggregate var_pop on columns"""
type ratings_var_pop_fields {
  message_id: Float
  round_id: Float
  value: Float
}

"""
order by var_pop() on columns of table "ratings"
"""
input ratings_var_pop_order_by {
  message_id: order_by
  round_id: order_by
  value: order_by
}

"""aggregate var_samp on columns"""
type ratings_var_samp_fields {
  message_id: Float
  round_id: Float
  value: Float
}

"""
order by var_samp() on columns of table "ratings"
"""
input ratings_var_samp_order_by {
  message_id: order_by
  round_id: order_by
  value: order_by
}

"""aggregate variance on columns"""
type ratings_variance_fields {
  message_id: Float
  round_id: Float
  value: Float
}

"""
order by variance() on columns of table "ratings"
"""
input ratings_variance_order_by {
  message_id: order_by
  round_id: order_by
  value: order_by
}

input search_applications_args {
  search: String
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "applications"
  """
  applications(
    """distinct select on columns"""
    distinct_on: [applications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [applications_order_by!]

    """filter the rows returned"""
    where: applications_bool_exp
  ): [applications!]!

  """
  fetch aggregated fields from the table: "applications"
  """
  applications_aggregate(
    """distinct select on columns"""
    distinct_on: [applications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [applications_order_by!]

    """filter the rows returned"""
    where: applications_bool_exp
  ): applications_aggregate!

  """fetch data from the table: "applications" using primary key columns"""
  applications_by_pk(id: uuid!): applications

  """
  fetch data from the table: "category_mediums"
  """
  category_mediums(
    """distinct select on columns"""
    distinct_on: [category_mediums_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_mediums_order_by!]

    """filter the rows returned"""
    where: category_mediums_bool_exp
  ): [category_mediums!]!

  """
  fetch aggregated fields from the table: "category_mediums"
  """
  category_mediums_aggregate(
    """distinct select on columns"""
    distinct_on: [category_mediums_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_mediums_order_by!]

    """filter the rows returned"""
    where: category_mediums_bool_exp
  ): category_mediums_aggregate!

  """
  fetch data from the table: "category_mediums" using primary key columns
  """
  category_mediums_by_pk(id: uuid!): category_mediums

  """
  fetch data from the table: "category_tags"
  """
  category_tags(
    """distinct select on columns"""
    distinct_on: [category_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_tags_order_by!]

    """filter the rows returned"""
    where: category_tags_bool_exp
  ): [category_tags!]!

  """
  fetch aggregated fields from the table: "category_tags"
  """
  category_tags_aggregate(
    """distinct select on columns"""
    distinct_on: [category_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_tags_order_by!]

    """filter the rows returned"""
    where: category_tags_bool_exp
  ): category_tags_aggregate!

  """fetch data from the table: "category_tags" using primary key columns"""
  category_tags_by_pk(id: uuid!): category_tags

  """
  fetch data from the table: "editions"
  """
  editions(
    """distinct select on columns"""
    distinct_on: [editions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [editions_order_by!]

    """filter the rows returned"""
    where: editions_bool_exp
  ): [editions!]!

  """
  fetch aggregated fields from the table: "editions"
  """
  editions_aggregate(
    """distinct select on columns"""
    distinct_on: [editions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [editions_order_by!]

    """filter the rows returned"""
    where: editions_bool_exp
  ): editions_aggregate!

  """fetch data from the table: "editions" using primary key columns"""
  editions_by_pk(id: Int!): editions

  """
  fetch data from the table: "eliminations"
  """
  eliminations(
    """distinct select on columns"""
    distinct_on: [eliminations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [eliminations_order_by!]

    """filter the rows returned"""
    where: eliminations_bool_exp
  ): [eliminations!]!

  """
  fetch aggregated fields from the table: "eliminations"
  """
  eliminations_aggregate(
    """distinct select on columns"""
    distinct_on: [eliminations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [eliminations_order_by!]

    """filter the rows returned"""
    where: eliminations_bool_exp
  ): eliminations_aggregate!

  """fetch data from the table: "eliminations" using primary key columns"""
  eliminations_by_pk(application_id: uuid!): eliminations

  """
  fetch data from the table: "messages"
  """
  messages(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]

    """filter the rows returned"""
    where: messages_bool_exp
  ): [messages!]!

  """
  fetch aggregated fields from the table: "messages"
  """
  messages_aggregate(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]

    """filter the rows returned"""
    where: messages_bool_exp
  ): messages_aggregate!

  """fetch data from the table: "messages" using primary key columns"""
  messages_by_pk(id: Int!): messages

  """
  fetch data from the table: "payments"
  """
  payments(
    """distinct select on columns"""
    distinct_on: [payments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [payments_order_by!]

    """filter the rows returned"""
    where: payments_bool_exp
  ): [payments!]!

  """
  fetch aggregated fields from the table: "payments"
  """
  payments_aggregate(
    """distinct select on columns"""
    distinct_on: [payments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [payments_order_by!]

    """filter the rows returned"""
    where: payments_bool_exp
  ): payments_aggregate!

  """fetch data from the table: "payments" using primary key columns"""
  payments_by_pk(id: uuid!): payments

  """
  fetch data from the table: "rating_rounds"
  """
  rating_rounds(
    """distinct select on columns"""
    distinct_on: [rating_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rating_rounds_order_by!]

    """filter the rows returned"""
    where: rating_rounds_bool_exp
  ): [rating_rounds!]!

  """
  fetch aggregated fields from the table: "rating_rounds"
  """
  rating_rounds_aggregate(
    """distinct select on columns"""
    distinct_on: [rating_rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rating_rounds_order_by!]

    """filter the rows returned"""
    where: rating_rounds_bool_exp
  ): rating_rounds_aggregate!

  """fetch data from the table: "rating_rounds" using primary key columns"""
  rating_rounds_by_pk(id: Int!): rating_rounds

  """
  fetch data from the table: "rating_rounds_sorted"
  """
  rating_rounds_sorted(
    """distinct select on columns"""
    distinct_on: [rating_rounds_sorted_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rating_rounds_sorted_order_by!]

    """filter the rows returned"""
    where: rating_rounds_sorted_bool_exp
  ): [rating_rounds_sorted!]!

  """
  fetch aggregated fields from the table: "rating_rounds_sorted"
  """
  rating_rounds_sorted_aggregate(
    """distinct select on columns"""
    distinct_on: [rating_rounds_sorted_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rating_rounds_sorted_order_by!]

    """filter the rows returned"""
    where: rating_rounds_sorted_bool_exp
  ): rating_rounds_sorted_aggregate!

  """
  fetch data from the table: "ratings"
  """
  ratings(
    """distinct select on columns"""
    distinct_on: [ratings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ratings_order_by!]

    """filter the rows returned"""
    where: ratings_bool_exp
  ): [ratings!]!

  """
  fetch aggregated fields from the table: "ratings"
  """
  ratings_aggregate(
    """distinct select on columns"""
    distinct_on: [ratings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ratings_order_by!]

    """filter the rows returned"""
    where: ratings_bool_exp
  ): ratings_aggregate!

  """
  fetch data from the table: "ratings_by_application"
  """
  ratings_by_application(
    """distinct select on columns"""
    distinct_on: [ratings_by_application_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ratings_by_application_order_by!]

    """filter the rows returned"""
    where: ratings_by_application_bool_exp
  ): [ratings_by_application!]!

  """
  fetch aggregated fields from the table: "ratings_by_application"
  """
  ratings_by_application_aggregate(
    """distinct select on columns"""
    distinct_on: [ratings_by_application_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ratings_by_application_order_by!]

    """filter the rows returned"""
    where: ratings_by_application_bool_exp
  ): ratings_by_application_aggregate!

  """fetch data from the table: "ratings" using primary key columns"""
  ratings_by_pk(id: uuid!): ratings

  """
  execute function "search_applications" which returns "applications"
  """
  search_applications(
    """
    input parameters for function "search_applications"
    """
    args: search_applications_args!

    """distinct select on columns"""
    distinct_on: [applications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [applications_order_by!]

    """filter the rows returned"""
    where: applications_bool_exp
  ): [applications!]!

  """
  execute function "search_applications" and query aggregates on result of table type "applications"
  """
  search_applications_aggregate(
    """
    input parameters for function "search_applications"
    """
    args: search_applications_args!

    """distinct select on columns"""
    distinct_on: [applications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [applications_order_by!]

    """filter the rows returned"""
    where: applications_bool_exp
  ): applications_aggregate!

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: String!): users

  """
  fetch data from the table: "users_online"
  """
  users_online(
    """distinct select on columns"""
    distinct_on: [users_online_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_online_order_by!]

    """filter the rows returned"""
    where: users_online_bool_exp
  ): [users_online!]!

  """
  fetch aggregated fields from the table: "users_online"
  """
  users_online_aggregate(
    """distinct select on columns"""
    distinct_on: [users_online_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_online_order_by!]

    """filter the rows returned"""
    where: users_online_bool_exp
  ): users_online_aggregate!

  """
  fetch data from the table: "wordlist"
  """
  wordlist(
    """distinct select on columns"""
    distinct_on: [wordlist_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wordlist_order_by!]

    """filter the rows returned"""
    where: wordlist_bool_exp
  ): [wordlist!]!

  """
  fetch aggregated fields from the table: "wordlist"
  """
  wordlist_aggregate(
    """distinct select on columns"""
    distinct_on: [wordlist_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wordlist_order_by!]

    """filter the rows returned"""
    where: wordlist_bool_exp
  ): wordlist_aggregate!

  """fetch data from the table: "wordlist" using primary key columns"""
  wordlist_by_pk(id: Int!): wordlist

  """
  fetch data from the table: "work_files"
  """
  work_files(
    """distinct select on columns"""
    distinct_on: [work_files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_files_order_by!]

    """filter the rows returned"""
    where: work_files_bool_exp
  ): [work_files!]!

  """
  fetch aggregated fields from the table: "work_files"
  """
  work_files_aggregate(
    """distinct select on columns"""
    distinct_on: [work_files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_files_order_by!]

    """filter the rows returned"""
    where: work_files_bool_exp
  ): work_files_aggregate!

  """fetch data from the table: "work_files" using primary key columns"""
  work_files_by_pk(id: uuid!): work_files

  """
  fetch data from the table: "work_specification_mediums"
  """
  work_specification_mediums(
    """distinct select on columns"""
    distinct_on: [work_specification_mediums_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specification_mediums_order_by!]

    """filter the rows returned"""
    where: work_specification_mediums_bool_exp
  ): [work_specification_mediums!]!

  """
  fetch aggregated fields from the table: "work_specification_mediums"
  """
  work_specification_mediums_aggregate(
    """distinct select on columns"""
    distinct_on: [work_specification_mediums_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specification_mediums_order_by!]

    """filter the rows returned"""
    where: work_specification_mediums_bool_exp
  ): work_specification_mediums_aggregate!

  """
  fetch data from the table: "work_specification_mediums" using primary key columns
  """
  work_specification_mediums_by_pk(medium_id: uuid!, specification_id: uuid!): work_specification_mediums

  """
  fetch data from the table: "work_specification_tags"
  """
  work_specification_tags(
    """distinct select on columns"""
    distinct_on: [work_specification_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specification_tags_order_by!]

    """filter the rows returned"""
    where: work_specification_tags_bool_exp
  ): [work_specification_tags!]!

  """
  fetch aggregated fields from the table: "work_specification_tags"
  """
  work_specification_tags_aggregate(
    """distinct select on columns"""
    distinct_on: [work_specification_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specification_tags_order_by!]

    """filter the rows returned"""
    where: work_specification_tags_bool_exp
  ): work_specification_tags_aggregate!

  """
  fetch data from the table: "work_specification_tags" using primary key columns
  """
  work_specification_tags_by_pk(specification_id: uuid!, tag_id: uuid!): work_specification_tags

  """
  fetch data from the table: "work_specifications"
  """
  work_specifications(
    """distinct select on columns"""
    distinct_on: [work_specifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specifications_order_by!]

    """filter the rows returned"""
    where: work_specifications_bool_exp
  ): [work_specifications!]!

  """
  fetch aggregated fields from the table: "work_specifications"
  """
  work_specifications_aggregate(
    """distinct select on columns"""
    distinct_on: [work_specifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specifications_order_by!]

    """filter the rows returned"""
    where: work_specifications_bool_exp
  ): work_specifications_aggregate!

  """
  fetch data from the table: "work_specifications" using primary key columns
  """
  work_specifications_by_pk(id: uuid!): work_specifications

  """
  fetch data from the table: "works"
  """
  works(
    """distinct select on columns"""
    distinct_on: [works_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [works_order_by!]

    """filter the rows returned"""
    where: works_bool_exp
  ): [works!]!

  """
  fetch aggregated fields from the table: "works"
  """
  works_aggregate(
    """distinct select on columns"""
    distinct_on: [works_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [works_order_by!]

    """filter the rows returned"""
    where: works_bool_exp
  ): works_aggregate!

  """fetch data from the table: "works" using primary key columns"""
  works_by_pk(id: uuid!): works
}

scalar timestamp

"""
expression to compare columns of type timestamp. All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "users"
"""
type users {
  """An array relationship"""
  applications(
    """distinct select on columns"""
    distinct_on: [applications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [applications_order_by!]

    """filter the rows returned"""
    where: applications_bool_exp
  ): [applications!]!

  """An aggregated array relationship"""
  applications_aggregate(
    """distinct select on columns"""
    distinct_on: [applications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [applications_order_by!]

    """filter the rows returned"""
    where: applications_bool_exp
  ): applications_aggregate!
  id: String!
  last_seen: timestamptz
  name: String
  type: String!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int
  max: users_max_fields
  min: users_min_fields
}

"""
order by aggregate values of table "users"
"""
input users_aggregate_order_by {
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
}

"""
input type for inserting array relation for remote table "users"
"""
input users_arr_rel_insert_input {
  data: [users_insert_input!]!
  on_conflict: users_on_conflict
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp]
  _not: users_bool_exp
  _or: [users_bool_exp]
  applications: applications_bool_exp
  id: String_comparison_exp
  last_seen: timestamptz_comparison_exp
  name: String_comparison_exp
  type: String_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """unique or primary key constraint"""
  users_pkey
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  applications: applications_arr_rel_insert_input
  id: String
  last_seen: timestamptz
  name: String
  type: String
}

"""aggregate max on columns"""
type users_max_fields {
  id: String
  last_seen: timestamptz
  name: String
  type: String
}

"""
order by max() on columns of table "users"
"""
input users_max_order_by {
  id: order_by
  last_seen: order_by
  name: order_by
  type: order_by
}

"""aggregate min on columns"""
type users_min_fields {
  id: String
  last_seen: timestamptz
  name: String
  type: String
}

"""
order by min() on columns of table "users"
"""
input users_min_order_by {
  id: order_by
  last_seen: order_by
  name: order_by
  type: order_by
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!
  on_conflict: users_on_conflict
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]!
  where: users_bool_exp
}

"""
columns and relationships of "users_online"
"""
type users_online {
  id: String
  last_seen: timestamptz
  name: String
  type: String
}

"""
aggregated selection of "users_online"
"""
type users_online_aggregate {
  aggregate: users_online_aggregate_fields
  nodes: [users_online!]!
}

"""
aggregate fields of "users_online"
"""
type users_online_aggregate_fields {
  count(columns: [users_online_select_column!], distinct: Boolean): Int
  max: users_online_max_fields
  min: users_online_min_fields
}

"""
order by aggregate values of table "users_online"
"""
input users_online_aggregate_order_by {
  count: order_by
  max: users_online_max_order_by
  min: users_online_min_order_by
}

"""
input type for inserting array relation for remote table "users_online"
"""
input users_online_arr_rel_insert_input {
  data: [users_online_insert_input!]!
}

"""
Boolean expression to filter rows from the table "users_online". All fields are combined with a logical 'AND'.
"""
input users_online_bool_exp {
  _and: [users_online_bool_exp]
  _not: users_online_bool_exp
  _or: [users_online_bool_exp]
  id: String_comparison_exp
  last_seen: timestamptz_comparison_exp
  name: String_comparison_exp
  type: String_comparison_exp
}

"""
input type for inserting data into table "users_online"
"""
input users_online_insert_input {
  id: String
  last_seen: timestamptz
  name: String
  type: String
}

"""aggregate max on columns"""
type users_online_max_fields {
  id: String
  last_seen: timestamptz
  name: String
  type: String
}

"""
order by max() on columns of table "users_online"
"""
input users_online_max_order_by {
  id: order_by
  last_seen: order_by
  name: order_by
  type: order_by
}

"""aggregate min on columns"""
type users_online_min_fields {
  id: String
  last_seen: timestamptz
  name: String
  type: String
}

"""
order by min() on columns of table "users_online"
"""
input users_online_min_order_by {
  id: order_by
  last_seen: order_by
  name: order_by
  type: order_by
}

"""
response of any mutation on the table "users_online"
"""
type users_online_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [users_online!]!
}

"""
input type for inserting object relation for remote table "users_online"
"""
input users_online_obj_rel_insert_input {
  data: users_online_insert_input!
}

"""
ordering options when selecting data from "users_online"
"""
input users_online_order_by {
  id: order_by
  last_seen: order_by
  name: order_by
  type: order_by
}

"""
select columns of table "users_online"
"""
enum users_online_select_column {
  """column name"""
  id

  """column name"""
  last_seen

  """column name"""
  name

  """column name"""
  type
}

"""
input type for updating data in table "users_online"
"""
input users_online_set_input {
  id: String
  last_seen: timestamptz
  name: String
  type: String
}

"""
ordering options when selecting data from "users"
"""
input users_order_by {
  applications_aggregate: applications_aggregate_order_by
  id: order_by
  last_seen: order_by
  name: order_by
  type: order_by
}

"""
primary key columns input for table: "users"
"""
input users_pk_columns_input {
  id: String!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  id

  """column name"""
  last_seen

  """column name"""
  name

  """column name"""
  type
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  id: String
  last_seen: timestamptz
  name: String
  type: String
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  id

  """column name"""
  last_seen

  """column name"""
  name

  """column name"""
  type
}

scalar uuid

"""
expression to compare columns of type uuid. All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

"""
columns and relationships of "wordlist"
"""
type wordlist {
  id: Int!
  value: String!
}

"""
aggregated selection of "wordlist"
"""
type wordlist_aggregate {
  aggregate: wordlist_aggregate_fields
  nodes: [wordlist!]!
}

"""
aggregate fields of "wordlist"
"""
type wordlist_aggregate_fields {
  avg: wordlist_avg_fields
  count(columns: [wordlist_select_column!], distinct: Boolean): Int
  max: wordlist_max_fields
  min: wordlist_min_fields
  stddev: wordlist_stddev_fields
  stddev_pop: wordlist_stddev_pop_fields
  stddev_samp: wordlist_stddev_samp_fields
  sum: wordlist_sum_fields
  var_pop: wordlist_var_pop_fields
  var_samp: wordlist_var_samp_fields
  variance: wordlist_variance_fields
}

"""
order by aggregate values of table "wordlist"
"""
input wordlist_aggregate_order_by {
  avg: wordlist_avg_order_by
  count: order_by
  max: wordlist_max_order_by
  min: wordlist_min_order_by
  stddev: wordlist_stddev_order_by
  stddev_pop: wordlist_stddev_pop_order_by
  stddev_samp: wordlist_stddev_samp_order_by
  sum: wordlist_sum_order_by
  var_pop: wordlist_var_pop_order_by
  var_samp: wordlist_var_samp_order_by
  variance: wordlist_variance_order_by
}

"""
input type for inserting array relation for remote table "wordlist"
"""
input wordlist_arr_rel_insert_input {
  data: [wordlist_insert_input!]!
  on_conflict: wordlist_on_conflict
}

"""aggregate avg on columns"""
type wordlist_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "wordlist"
"""
input wordlist_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "wordlist". All fields are combined with a logical 'AND'.
"""
input wordlist_bool_exp {
  _and: [wordlist_bool_exp]
  _not: wordlist_bool_exp
  _or: [wordlist_bool_exp]
  id: Int_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "wordlist"
"""
enum wordlist_constraint {
  """unique or primary key constraint"""
  wordlist_pkey
}

"""
input type for incrementing integer column in table "wordlist"
"""
input wordlist_inc_input {
  id: Int
}

"""
input type for inserting data into table "wordlist"
"""
input wordlist_insert_input {
  id: Int
  value: String
}

"""aggregate max on columns"""
type wordlist_max_fields {
  id: Int
  value: String
}

"""
order by max() on columns of table "wordlist"
"""
input wordlist_max_order_by {
  id: order_by
  value: order_by
}

"""aggregate min on columns"""
type wordlist_min_fields {
  id: Int
  value: String
}

"""
order by min() on columns of table "wordlist"
"""
input wordlist_min_order_by {
  id: order_by
  value: order_by
}

"""
response of any mutation on the table "wordlist"
"""
type wordlist_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [wordlist!]!
}

"""
input type for inserting object relation for remote table "wordlist"
"""
input wordlist_obj_rel_insert_input {
  data: wordlist_insert_input!
  on_conflict: wordlist_on_conflict
}

"""
on conflict condition type for table "wordlist"
"""
input wordlist_on_conflict {
  constraint: wordlist_constraint!
  update_columns: [wordlist_update_column!]!
  where: wordlist_bool_exp
}

"""
ordering options when selecting data from "wordlist"
"""
input wordlist_order_by {
  id: order_by
  value: order_by
}

"""
primary key columns input for table: "wordlist"
"""
input wordlist_pk_columns_input {
  id: Int!
}

"""
select columns of table "wordlist"
"""
enum wordlist_select_column {
  """column name"""
  id

  """column name"""
  value
}

"""
input type for updating data in table "wordlist"
"""
input wordlist_set_input {
  id: Int
  value: String
}

"""aggregate stddev on columns"""
type wordlist_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "wordlist"
"""
input wordlist_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type wordlist_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "wordlist"
"""
input wordlist_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type wordlist_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "wordlist"
"""
input wordlist_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type wordlist_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "wordlist"
"""
input wordlist_sum_order_by {
  id: order_by
}

"""
update columns of table "wordlist"
"""
enum wordlist_update_column {
  """column name"""
  id

  """column name"""
  value
}

"""aggregate var_pop on columns"""
type wordlist_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "wordlist"
"""
input wordlist_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type wordlist_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "wordlist"
"""
input wordlist_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type wordlist_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "wordlist"
"""
input wordlist_variance_order_by {
  id: order_by
}

"""
columns and relationships of "work_files"
"""
type work_files {
  """An object relationship"""
  application: applications!
  application_id: uuid!
  created_at: timestamptz!
  id: uuid!
  key: String!
  mimetype: String!
  order: Int!
  originalname: String!
  size: numeric!

  """An object relationship"""
  work: works!
  work_id: uuid!
}

"""
aggregated selection of "work_files"
"""
type work_files_aggregate {
  aggregate: work_files_aggregate_fields
  nodes: [work_files!]!
}

"""
aggregate fields of "work_files"
"""
type work_files_aggregate_fields {
  avg: work_files_avg_fields
  count(columns: [work_files_select_column!], distinct: Boolean): Int
  max: work_files_max_fields
  min: work_files_min_fields
  stddev: work_files_stddev_fields
  stddev_pop: work_files_stddev_pop_fields
  stddev_samp: work_files_stddev_samp_fields
  sum: work_files_sum_fields
  var_pop: work_files_var_pop_fields
  var_samp: work_files_var_samp_fields
  variance: work_files_variance_fields
}

"""
order by aggregate values of table "work_files"
"""
input work_files_aggregate_order_by {
  avg: work_files_avg_order_by
  count: order_by
  max: work_files_max_order_by
  min: work_files_min_order_by
  stddev: work_files_stddev_order_by
  stddev_pop: work_files_stddev_pop_order_by
  stddev_samp: work_files_stddev_samp_order_by
  sum: work_files_sum_order_by
  var_pop: work_files_var_pop_order_by
  var_samp: work_files_var_samp_order_by
  variance: work_files_variance_order_by
}

"""
input type for inserting array relation for remote table "work_files"
"""
input work_files_arr_rel_insert_input {
  data: [work_files_insert_input!]!
  on_conflict: work_files_on_conflict
}

"""aggregate avg on columns"""
type work_files_avg_fields {
  order: Float
  size: Float
}

"""
order by avg() on columns of table "work_files"
"""
input work_files_avg_order_by {
  order: order_by
  size: order_by
}

"""
Boolean expression to filter rows from the table "work_files". All fields are combined with a logical 'AND'.
"""
input work_files_bool_exp {
  _and: [work_files_bool_exp]
  _not: work_files_bool_exp
  _or: [work_files_bool_exp]
  application: applications_bool_exp
  application_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  key: String_comparison_exp
  mimetype: String_comparison_exp
  order: Int_comparison_exp
  originalname: String_comparison_exp
  size: numeric_comparison_exp
  work: works_bool_exp
  work_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "work_files"
"""
enum work_files_constraint {
  """unique or primary key constraint"""
  work_files_pkey
}

"""
input type for incrementing integer column in table "work_files"
"""
input work_files_inc_input {
  order: Int
  size: numeric
}

"""
input type for inserting data into table "work_files"
"""
input work_files_insert_input {
  application: applications_obj_rel_insert_input
  application_id: uuid
  created_at: timestamptz
  id: uuid
  key: String
  mimetype: String
  order: Int
  originalname: String
  size: numeric
  work: works_obj_rel_insert_input
  work_id: uuid
}

"""aggregate max on columns"""
type work_files_max_fields {
  application_id: uuid
  created_at: timestamptz
  id: uuid
  key: String
  mimetype: String
  order: Int
  originalname: String
  size: numeric
  work_id: uuid
}

"""
order by max() on columns of table "work_files"
"""
input work_files_max_order_by {
  application_id: order_by
  created_at: order_by
  id: order_by
  key: order_by
  mimetype: order_by
  order: order_by
  originalname: order_by
  size: order_by
  work_id: order_by
}

"""aggregate min on columns"""
type work_files_min_fields {
  application_id: uuid
  created_at: timestamptz
  id: uuid
  key: String
  mimetype: String
  order: Int
  originalname: String
  size: numeric
  work_id: uuid
}

"""
order by min() on columns of table "work_files"
"""
input work_files_min_order_by {
  application_id: order_by
  created_at: order_by
  id: order_by
  key: order_by
  mimetype: order_by
  order: order_by
  originalname: order_by
  size: order_by
  work_id: order_by
}

"""
response of any mutation on the table "work_files"
"""
type work_files_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [work_files!]!
}

"""
input type for inserting object relation for remote table "work_files"
"""
input work_files_obj_rel_insert_input {
  data: work_files_insert_input!
  on_conflict: work_files_on_conflict
}

"""
on conflict condition type for table "work_files"
"""
input work_files_on_conflict {
  constraint: work_files_constraint!
  update_columns: [work_files_update_column!]!
  where: work_files_bool_exp
}

"""
ordering options when selecting data from "work_files"
"""
input work_files_order_by {
  application: applications_order_by
  application_id: order_by
  created_at: order_by
  id: order_by
  key: order_by
  mimetype: order_by
  order: order_by
  originalname: order_by
  size: order_by
  work: works_order_by
  work_id: order_by
}

"""
primary key columns input for table: "work_files"
"""
input work_files_pk_columns_input {
  id: uuid!
}

"""
select columns of table "work_files"
"""
enum work_files_select_column {
  """column name"""
  application_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  key

  """column name"""
  mimetype

  """column name"""
  order

  """column name"""
  originalname

  """column name"""
  size

  """column name"""
  work_id
}

"""
input type for updating data in table "work_files"
"""
input work_files_set_input {
  application_id: uuid
  created_at: timestamptz
  id: uuid
  key: String
  mimetype: String
  order: Int
  originalname: String
  size: numeric
  work_id: uuid
}

"""aggregate stddev on columns"""
type work_files_stddev_fields {
  order: Float
  size: Float
}

"""
order by stddev() on columns of table "work_files"
"""
input work_files_stddev_order_by {
  order: order_by
  size: order_by
}

"""aggregate stddev_pop on columns"""
type work_files_stddev_pop_fields {
  order: Float
  size: Float
}

"""
order by stddev_pop() on columns of table "work_files"
"""
input work_files_stddev_pop_order_by {
  order: order_by
  size: order_by
}

"""aggregate stddev_samp on columns"""
type work_files_stddev_samp_fields {
  order: Float
  size: Float
}

"""
order by stddev_samp() on columns of table "work_files"
"""
input work_files_stddev_samp_order_by {
  order: order_by
  size: order_by
}

"""aggregate sum on columns"""
type work_files_sum_fields {
  order: Int
  size: numeric
}

"""
order by sum() on columns of table "work_files"
"""
input work_files_sum_order_by {
  order: order_by
  size: order_by
}

"""
update columns of table "work_files"
"""
enum work_files_update_column {
  """column name"""
  application_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  key

  """column name"""
  mimetype

  """column name"""
  order

  """column name"""
  originalname

  """column name"""
  size

  """column name"""
  work_id
}

"""aggregate var_pop on columns"""
type work_files_var_pop_fields {
  order: Float
  size: Float
}

"""
order by var_pop() on columns of table "work_files"
"""
input work_files_var_pop_order_by {
  order: order_by
  size: order_by
}

"""aggregate var_samp on columns"""
type work_files_var_samp_fields {
  order: Float
  size: Float
}

"""
order by var_samp() on columns of table "work_files"
"""
input work_files_var_samp_order_by {
  order: order_by
  size: order_by
}

"""aggregate variance on columns"""
type work_files_variance_fields {
  order: Float
  size: Float
}

"""
order by variance() on columns of table "work_files"
"""
input work_files_variance_order_by {
  order: order_by
  size: order_by
}

"""
columns and relationships of "work_specification_mediums"
"""
type work_specification_mediums {
  """An object relationship"""
  category_medium: category_mediums!
  medium_id: uuid!
  specification_id: uuid!

  """An object relationship"""
  works_specification: work_specifications!
}

"""
aggregated selection of "work_specification_mediums"
"""
type work_specification_mediums_aggregate {
  aggregate: work_specification_mediums_aggregate_fields
  nodes: [work_specification_mediums!]!
}

"""
aggregate fields of "work_specification_mediums"
"""
type work_specification_mediums_aggregate_fields {
  count(columns: [work_specification_mediums_select_column!], distinct: Boolean): Int
  max: work_specification_mediums_max_fields
  min: work_specification_mediums_min_fields
}

"""
order by aggregate values of table "work_specification_mediums"
"""
input work_specification_mediums_aggregate_order_by {
  count: order_by
  max: work_specification_mediums_max_order_by
  min: work_specification_mediums_min_order_by
}

"""
input type for inserting array relation for remote table "work_specification_mediums"
"""
input work_specification_mediums_arr_rel_insert_input {
  data: [work_specification_mediums_insert_input!]!
  on_conflict: work_specification_mediums_on_conflict
}

"""
Boolean expression to filter rows from the table "work_specification_mediums". All fields are combined with a logical 'AND'.
"""
input work_specification_mediums_bool_exp {
  _and: [work_specification_mediums_bool_exp]
  _not: work_specification_mediums_bool_exp
  _or: [work_specification_mediums_bool_exp]
  category_medium: category_mediums_bool_exp
  medium_id: uuid_comparison_exp
  specification_id: uuid_comparison_exp
  works_specification: work_specifications_bool_exp
}

"""
unique or primary key constraints on table "work_specification_mediums"
"""
enum work_specification_mediums_constraint {
  """unique or primary key constraint"""
  work_specification_mediums_specification_id_medium_id_key

  """unique or primary key constraint"""
  works_mediums_pkey
}

"""
input type for inserting data into table "work_specification_mediums"
"""
input work_specification_mediums_insert_input {
  category_medium: category_mediums_obj_rel_insert_input
  medium_id: uuid
  specification_id: uuid
  works_specification: work_specifications_obj_rel_insert_input
}

"""aggregate max on columns"""
type work_specification_mediums_max_fields {
  medium_id: uuid
  specification_id: uuid
}

"""
order by max() on columns of table "work_specification_mediums"
"""
input work_specification_mediums_max_order_by {
  medium_id: order_by
  specification_id: order_by
}

"""aggregate min on columns"""
type work_specification_mediums_min_fields {
  medium_id: uuid
  specification_id: uuid
}

"""
order by min() on columns of table "work_specification_mediums"
"""
input work_specification_mediums_min_order_by {
  medium_id: order_by
  specification_id: order_by
}

"""
response of any mutation on the table "work_specification_mediums"
"""
type work_specification_mediums_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [work_specification_mediums!]!
}

"""
input type for inserting object relation for remote table "work_specification_mediums"
"""
input work_specification_mediums_obj_rel_insert_input {
  data: work_specification_mediums_insert_input!
  on_conflict: work_specification_mediums_on_conflict
}

"""
on conflict condition type for table "work_specification_mediums"
"""
input work_specification_mediums_on_conflict {
  constraint: work_specification_mediums_constraint!
  update_columns: [work_specification_mediums_update_column!]!
  where: work_specification_mediums_bool_exp
}

"""
ordering options when selecting data from "work_specification_mediums"
"""
input work_specification_mediums_order_by {
  category_medium: category_mediums_order_by
  medium_id: order_by
  specification_id: order_by
  works_specification: work_specifications_order_by
}

"""
primary key columns input for table: "work_specification_mediums"
"""
input work_specification_mediums_pk_columns_input {
  medium_id: uuid!
  specification_id: uuid!
}

"""
select columns of table "work_specification_mediums"
"""
enum work_specification_mediums_select_column {
  """column name"""
  medium_id

  """column name"""
  specification_id
}

"""
input type for updating data in table "work_specification_mediums"
"""
input work_specification_mediums_set_input {
  medium_id: uuid
  specification_id: uuid
}

"""
update columns of table "work_specification_mediums"
"""
enum work_specification_mediums_update_column {
  """column name"""
  medium_id

  """column name"""
  specification_id
}

"""
columns and relationships of "work_specification_tags"
"""
type work_specification_tags {
  specification_id: uuid!
  tag_id: uuid!
}

"""
aggregated selection of "work_specification_tags"
"""
type work_specification_tags_aggregate {
  aggregate: work_specification_tags_aggregate_fields
  nodes: [work_specification_tags!]!
}

"""
aggregate fields of "work_specification_tags"
"""
type work_specification_tags_aggregate_fields {
  count(columns: [work_specification_tags_select_column!], distinct: Boolean): Int
  max: work_specification_tags_max_fields
  min: work_specification_tags_min_fields
}

"""
order by aggregate values of table "work_specification_tags"
"""
input work_specification_tags_aggregate_order_by {
  count: order_by
  max: work_specification_tags_max_order_by
  min: work_specification_tags_min_order_by
}

"""
input type for inserting array relation for remote table "work_specification_tags"
"""
input work_specification_tags_arr_rel_insert_input {
  data: [work_specification_tags_insert_input!]!
  on_conflict: work_specification_tags_on_conflict
}

"""
Boolean expression to filter rows from the table "work_specification_tags". All fields are combined with a logical 'AND'.
"""
input work_specification_tags_bool_exp {
  _and: [work_specification_tags_bool_exp]
  _not: work_specification_tags_bool_exp
  _or: [work_specification_tags_bool_exp]
  specification_id: uuid_comparison_exp
  tag_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "work_specification_tags"
"""
enum work_specification_tags_constraint {
  """unique or primary key constraint"""
  work_specification_tags_pkey
}

"""
input type for inserting data into table "work_specification_tags"
"""
input work_specification_tags_insert_input {
  specification_id: uuid
  tag_id: uuid
}

"""aggregate max on columns"""
type work_specification_tags_max_fields {
  specification_id: uuid
  tag_id: uuid
}

"""
order by max() on columns of table "work_specification_tags"
"""
input work_specification_tags_max_order_by {
  specification_id: order_by
  tag_id: order_by
}

"""aggregate min on columns"""
type work_specification_tags_min_fields {
  specification_id: uuid
  tag_id: uuid
}

"""
order by min() on columns of table "work_specification_tags"
"""
input work_specification_tags_min_order_by {
  specification_id: order_by
  tag_id: order_by
}

"""
response of any mutation on the table "work_specification_tags"
"""
type work_specification_tags_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [work_specification_tags!]!
}

"""
input type for inserting object relation for remote table "work_specification_tags"
"""
input work_specification_tags_obj_rel_insert_input {
  data: work_specification_tags_insert_input!
  on_conflict: work_specification_tags_on_conflict
}

"""
on conflict condition type for table "work_specification_tags"
"""
input work_specification_tags_on_conflict {
  constraint: work_specification_tags_constraint!
  update_columns: [work_specification_tags_update_column!]!
  where: work_specification_tags_bool_exp
}

"""
ordering options when selecting data from "work_specification_tags"
"""
input work_specification_tags_order_by {
  specification_id: order_by
  tag_id: order_by
}

"""
primary key columns input for table: "work_specification_tags"
"""
input work_specification_tags_pk_columns_input {
  specification_id: uuid!
  tag_id: uuid!
}

"""
select columns of table "work_specification_tags"
"""
enum work_specification_tags_select_column {
  """column name"""
  specification_id

  """column name"""
  tag_id
}

"""
input type for updating data in table "work_specification_tags"
"""
input work_specification_tags_set_input {
  specification_id: uuid
  tag_id: uuid
}

"""
update columns of table "work_specification_tags"
"""
enum work_specification_tags_update_column {
  """column name"""
  specification_id

  """column name"""
  tag_id
}

"""
columns and relationships of "work_specifications"
"""
type work_specifications {
  """An object relationship"""
  application: applications!
  application_id: uuid!
  created_at: timestamptz!
  description: String
  dimensions_depth: Int
  dimensions_height: Int
  dimensions_width: Int
  id: uuid!
  medium: String

  """An array relationship"""
  mediums(
    """distinct select on columns"""
    distinct_on: [work_specification_mediums_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specification_mediums_order_by!]

    """filter the rows returned"""
    where: work_specification_mediums_bool_exp
  ): [work_specification_mediums!]!

  """An aggregated array relationship"""
  mediums_aggregate(
    """distinct select on columns"""
    distinct_on: [work_specification_mediums_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specification_mediums_order_by!]

    """filter the rows returned"""
    where: work_specification_mediums_bool_exp
  ): work_specification_mediums_aggregate!
  number_of_editions: Int
  order: Int
  title: String
  updated_at: timestamptz!
  video_password: String
  video_url: String

  """An object relationship"""
  work: works!
  work_id: uuid!
  year: Int
}

"""
aggregated selection of "work_specifications"
"""
type work_specifications_aggregate {
  aggregate: work_specifications_aggregate_fields
  nodes: [work_specifications!]!
}

"""
aggregate fields of "work_specifications"
"""
type work_specifications_aggregate_fields {
  avg: work_specifications_avg_fields
  count(columns: [work_specifications_select_column!], distinct: Boolean): Int
  max: work_specifications_max_fields
  min: work_specifications_min_fields
  stddev: work_specifications_stddev_fields
  stddev_pop: work_specifications_stddev_pop_fields
  stddev_samp: work_specifications_stddev_samp_fields
  sum: work_specifications_sum_fields
  var_pop: work_specifications_var_pop_fields
  var_samp: work_specifications_var_samp_fields
  variance: work_specifications_variance_fields
}

"""
order by aggregate values of table "work_specifications"
"""
input work_specifications_aggregate_order_by {
  avg: work_specifications_avg_order_by
  count: order_by
  max: work_specifications_max_order_by
  min: work_specifications_min_order_by
  stddev: work_specifications_stddev_order_by
  stddev_pop: work_specifications_stddev_pop_order_by
  stddev_samp: work_specifications_stddev_samp_order_by
  sum: work_specifications_sum_order_by
  var_pop: work_specifications_var_pop_order_by
  var_samp: work_specifications_var_samp_order_by
  variance: work_specifications_variance_order_by
}

"""
input type for inserting array relation for remote table "work_specifications"
"""
input work_specifications_arr_rel_insert_input {
  data: [work_specifications_insert_input!]!
  on_conflict: work_specifications_on_conflict
}

"""aggregate avg on columns"""
type work_specifications_avg_fields {
  dimensions_depth: Float
  dimensions_height: Float
  dimensions_width: Float
  number_of_editions: Float
  order: Float
  year: Float
}

"""
order by avg() on columns of table "work_specifications"
"""
input work_specifications_avg_order_by {
  dimensions_depth: order_by
  dimensions_height: order_by
  dimensions_width: order_by
  number_of_editions: order_by
  order: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "work_specifications". All fields are combined with a logical 'AND'.
"""
input work_specifications_bool_exp {
  _and: [work_specifications_bool_exp]
  _not: work_specifications_bool_exp
  _or: [work_specifications_bool_exp]
  application: applications_bool_exp
  application_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  dimensions_depth: Int_comparison_exp
  dimensions_height: Int_comparison_exp
  dimensions_width: Int_comparison_exp
  id: uuid_comparison_exp
  medium: String_comparison_exp
  mediums: work_specification_mediums_bool_exp
  number_of_editions: Int_comparison_exp
  order: Int_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  video_password: String_comparison_exp
  video_url: String_comparison_exp
  work: works_bool_exp
  work_id: uuid_comparison_exp
  year: Int_comparison_exp
}

"""
unique or primary key constraints on table "work_specifications"
"""
enum work_specifications_constraint {
  """unique or primary key constraint"""
  works_specifications_pkey
}

"""
input type for incrementing integer column in table "work_specifications"
"""
input work_specifications_inc_input {
  dimensions_depth: Int
  dimensions_height: Int
  dimensions_width: Int
  number_of_editions: Int
  order: Int
  year: Int
}

"""
input type for inserting data into table "work_specifications"
"""
input work_specifications_insert_input {
  application: applications_obj_rel_insert_input
  application_id: uuid
  created_at: timestamptz
  description: String
  dimensions_depth: Int
  dimensions_height: Int
  dimensions_width: Int
  id: uuid
  medium: String
  mediums: work_specification_mediums_arr_rel_insert_input
  number_of_editions: Int
  order: Int
  title: String
  updated_at: timestamptz
  video_password: String
  video_url: String
  work: works_obj_rel_insert_input
  work_id: uuid
  year: Int
}

"""aggregate max on columns"""
type work_specifications_max_fields {
  application_id: uuid
  created_at: timestamptz
  description: String
  dimensions_depth: Int
  dimensions_height: Int
  dimensions_width: Int
  id: uuid
  medium: String
  number_of_editions: Int
  order: Int
  title: String
  updated_at: timestamptz
  video_password: String
  video_url: String
  work_id: uuid
  year: Int
}

"""
order by max() on columns of table "work_specifications"
"""
input work_specifications_max_order_by {
  application_id: order_by
  created_at: order_by
  description: order_by
  dimensions_depth: order_by
  dimensions_height: order_by
  dimensions_width: order_by
  id: order_by
  medium: order_by
  number_of_editions: order_by
  order: order_by
  title: order_by
  updated_at: order_by
  video_password: order_by
  video_url: order_by
  work_id: order_by
  year: order_by
}

"""aggregate min on columns"""
type work_specifications_min_fields {
  application_id: uuid
  created_at: timestamptz
  description: String
  dimensions_depth: Int
  dimensions_height: Int
  dimensions_width: Int
  id: uuid
  medium: String
  number_of_editions: Int
  order: Int
  title: String
  updated_at: timestamptz
  video_password: String
  video_url: String
  work_id: uuid
  year: Int
}

"""
order by min() on columns of table "work_specifications"
"""
input work_specifications_min_order_by {
  application_id: order_by
  created_at: order_by
  description: order_by
  dimensions_depth: order_by
  dimensions_height: order_by
  dimensions_width: order_by
  id: order_by
  medium: order_by
  number_of_editions: order_by
  order: order_by
  title: order_by
  updated_at: order_by
  video_password: order_by
  video_url: order_by
  work_id: order_by
  year: order_by
}

"""
response of any mutation on the table "work_specifications"
"""
type work_specifications_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [work_specifications!]!
}

"""
input type for inserting object relation for remote table "work_specifications"
"""
input work_specifications_obj_rel_insert_input {
  data: work_specifications_insert_input!
  on_conflict: work_specifications_on_conflict
}

"""
on conflict condition type for table "work_specifications"
"""
input work_specifications_on_conflict {
  constraint: work_specifications_constraint!
  update_columns: [work_specifications_update_column!]!
  where: work_specifications_bool_exp
}

"""
ordering options when selecting data from "work_specifications"
"""
input work_specifications_order_by {
  application: applications_order_by
  application_id: order_by
  created_at: order_by
  description: order_by
  dimensions_depth: order_by
  dimensions_height: order_by
  dimensions_width: order_by
  id: order_by
  medium: order_by
  mediums_aggregate: work_specification_mediums_aggregate_order_by
  number_of_editions: order_by
  order: order_by
  title: order_by
  updated_at: order_by
  video_password: order_by
  video_url: order_by
  work: works_order_by
  work_id: order_by
  year: order_by
}

"""
primary key columns input for table: "work_specifications"
"""
input work_specifications_pk_columns_input {
  id: uuid!
}

"""
select columns of table "work_specifications"
"""
enum work_specifications_select_column {
  """column name"""
  application_id

  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  dimensions_depth

  """column name"""
  dimensions_height

  """column name"""
  dimensions_width

  """column name"""
  id

  """column name"""
  medium

  """column name"""
  number_of_editions

  """column name"""
  order

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  video_password

  """column name"""
  video_url

  """column name"""
  work_id

  """column name"""
  year
}

"""
input type for updating data in table "work_specifications"
"""
input work_specifications_set_input {
  application_id: uuid
  created_at: timestamptz
  description: String
  dimensions_depth: Int
  dimensions_height: Int
  dimensions_width: Int
  id: uuid
  medium: String
  number_of_editions: Int
  order: Int
  title: String
  updated_at: timestamptz
  video_password: String
  video_url: String
  work_id: uuid
  year: Int
}

"""aggregate stddev on columns"""
type work_specifications_stddev_fields {
  dimensions_depth: Float
  dimensions_height: Float
  dimensions_width: Float
  number_of_editions: Float
  order: Float
  year: Float
}

"""
order by stddev() on columns of table "work_specifications"
"""
input work_specifications_stddev_order_by {
  dimensions_depth: order_by
  dimensions_height: order_by
  dimensions_width: order_by
  number_of_editions: order_by
  order: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type work_specifications_stddev_pop_fields {
  dimensions_depth: Float
  dimensions_height: Float
  dimensions_width: Float
  number_of_editions: Float
  order: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "work_specifications"
"""
input work_specifications_stddev_pop_order_by {
  dimensions_depth: order_by
  dimensions_height: order_by
  dimensions_width: order_by
  number_of_editions: order_by
  order: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type work_specifications_stddev_samp_fields {
  dimensions_depth: Float
  dimensions_height: Float
  dimensions_width: Float
  number_of_editions: Float
  order: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "work_specifications"
"""
input work_specifications_stddev_samp_order_by {
  dimensions_depth: order_by
  dimensions_height: order_by
  dimensions_width: order_by
  number_of_editions: order_by
  order: order_by
  year: order_by
}

"""aggregate sum on columns"""
type work_specifications_sum_fields {
  dimensions_depth: Int
  dimensions_height: Int
  dimensions_width: Int
  number_of_editions: Int
  order: Int
  year: Int
}

"""
order by sum() on columns of table "work_specifications"
"""
input work_specifications_sum_order_by {
  dimensions_depth: order_by
  dimensions_height: order_by
  dimensions_width: order_by
  number_of_editions: order_by
  order: order_by
  year: order_by
}

"""
update columns of table "work_specifications"
"""
enum work_specifications_update_column {
  """column name"""
  application_id

  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  dimensions_depth

  """column name"""
  dimensions_height

  """column name"""
  dimensions_width

  """column name"""
  id

  """column name"""
  medium

  """column name"""
  number_of_editions

  """column name"""
  order

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  video_password

  """column name"""
  video_url

  """column name"""
  work_id

  """column name"""
  year
}

"""aggregate var_pop on columns"""
type work_specifications_var_pop_fields {
  dimensions_depth: Float
  dimensions_height: Float
  dimensions_width: Float
  number_of_editions: Float
  order: Float
  year: Float
}

"""
order by var_pop() on columns of table "work_specifications"
"""
input work_specifications_var_pop_order_by {
  dimensions_depth: order_by
  dimensions_height: order_by
  dimensions_width: order_by
  number_of_editions: order_by
  order: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type work_specifications_var_samp_fields {
  dimensions_depth: Float
  dimensions_height: Float
  dimensions_width: Float
  number_of_editions: Float
  order: Float
  year: Float
}

"""
order by var_samp() on columns of table "work_specifications"
"""
input work_specifications_var_samp_order_by {
  dimensions_depth: order_by
  dimensions_height: order_by
  dimensions_width: order_by
  number_of_editions: order_by
  order: order_by
  year: order_by
}

"""aggregate variance on columns"""
type work_specifications_variance_fields {
  dimensions_depth: Float
  dimensions_height: Float
  dimensions_width: Float
  number_of_editions: Float
  order: Float
  year: Float
}

"""
order by variance() on columns of table "work_specifications"
"""
input work_specifications_variance_order_by {
  dimensions_depth: order_by
  dimensions_height: order_by
  dimensions_width: order_by
  number_of_editions: order_by
  order: order_by
  year: order_by
}

"""
columns and relationships of "works"
"""
type works {
  """An object relationship"""
  application: applications!
  application_id: uuid!
  created_at: timestamptz!

  """An array relationship"""
  files(
    """distinct select on columns"""
    distinct_on: [work_files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_files_order_by!]

    """filter the rows returned"""
    where: work_files_bool_exp
  ): [work_files!]!

  """An aggregated array relationship"""
  files_aggregate(
    """distinct select on columns"""
    distinct_on: [work_files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_files_order_by!]

    """filter the rows returned"""
    where: work_files_bool_exp
  ): work_files_aggregate!
  id: uuid!
  order: numeric
  portfolio: Boolean

  """An array relationship"""
  specifications(
    """distinct select on columns"""
    distinct_on: [work_specifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specifications_order_by!]

    """filter the rows returned"""
    where: work_specifications_bool_exp
  ): [work_specifications!]!

  """An aggregated array relationship"""
  specifications_aggregate(
    """distinct select on columns"""
    distinct_on: [work_specifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [work_specifications_order_by!]

    """filter the rows returned"""
    where: work_specifications_bool_exp
  ): work_specifications_aggregate!
  updated_at: timestamptz!
}

"""
aggregated selection of "works"
"""
type works_aggregate {
  aggregate: works_aggregate_fields
  nodes: [works!]!
}

"""
aggregate fields of "works"
"""
type works_aggregate_fields {
  avg: works_avg_fields
  count(columns: [works_select_column!], distinct: Boolean): Int
  max: works_max_fields
  min: works_min_fields
  stddev: works_stddev_fields
  stddev_pop: works_stddev_pop_fields
  stddev_samp: works_stddev_samp_fields
  sum: works_sum_fields
  var_pop: works_var_pop_fields
  var_samp: works_var_samp_fields
  variance: works_variance_fields
}

"""
order by aggregate values of table "works"
"""
input works_aggregate_order_by {
  avg: works_avg_order_by
  count: order_by
  max: works_max_order_by
  min: works_min_order_by
  stddev: works_stddev_order_by
  stddev_pop: works_stddev_pop_order_by
  stddev_samp: works_stddev_samp_order_by
  sum: works_sum_order_by
  var_pop: works_var_pop_order_by
  var_samp: works_var_samp_order_by
  variance: works_variance_order_by
}

"""
input type for inserting array relation for remote table "works"
"""
input works_arr_rel_insert_input {
  data: [works_insert_input!]!
  on_conflict: works_on_conflict
}

"""aggregate avg on columns"""
type works_avg_fields {
  order: Float
}

"""
order by avg() on columns of table "works"
"""
input works_avg_order_by {
  order: order_by
}

"""
Boolean expression to filter rows from the table "works". All fields are combined with a logical 'AND'.
"""
input works_bool_exp {
  _and: [works_bool_exp]
  _not: works_bool_exp
  _or: [works_bool_exp]
  application: applications_bool_exp
  application_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  files: work_files_bool_exp
  id: uuid_comparison_exp
  order: numeric_comparison_exp
  portfolio: Boolean_comparison_exp
  specifications: work_specifications_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "works"
"""
enum works_constraint {
  """unique or primary key constraint"""
  works_application_id_portfolio_key

  """unique or primary key constraint"""
  works_pkey
}

"""
input type for incrementing integer column in table "works"
"""
input works_inc_input {
  order: numeric
}

"""
input type for inserting data into table "works"
"""
input works_insert_input {
  application: applications_obj_rel_insert_input
  application_id: uuid
  created_at: timestamptz
  files: work_files_arr_rel_insert_input
  id: uuid
  order: numeric
  portfolio: Boolean
  specifications: work_specifications_arr_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type works_max_fields {
  application_id: uuid
  created_at: timestamptz
  id: uuid
  order: numeric
  updated_at: timestamptz
}

"""
order by max() on columns of table "works"
"""
input works_max_order_by {
  application_id: order_by
  created_at: order_by
  id: order_by
  order: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type works_min_fields {
  application_id: uuid
  created_at: timestamptz
  id: uuid
  order: numeric
  updated_at: timestamptz
}

"""
order by min() on columns of table "works"
"""
input works_min_order_by {
  application_id: order_by
  created_at: order_by
  id: order_by
  order: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "works"
"""
type works_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [works!]!
}

"""
input type for inserting object relation for remote table "works"
"""
input works_obj_rel_insert_input {
  data: works_insert_input!
  on_conflict: works_on_conflict
}

"""
on conflict condition type for table "works"
"""
input works_on_conflict {
  constraint: works_constraint!
  update_columns: [works_update_column!]!
  where: works_bool_exp
}

"""
ordering options when selecting data from "works"
"""
input works_order_by {
  application: applications_order_by
  application_id: order_by
  created_at: order_by
  files_aggregate: work_files_aggregate_order_by
  id: order_by
  order: order_by
  portfolio: order_by
  specifications_aggregate: work_specifications_aggregate_order_by
  updated_at: order_by
}

"""
primary key columns input for table: "works"
"""
input works_pk_columns_input {
  id: uuid!
}

"""
select columns of table "works"
"""
enum works_select_column {
  """column name"""
  application_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  order

  """column name"""
  portfolio

  """column name"""
  updated_at
}

"""
input type for updating data in table "works"
"""
input works_set_input {
  application_id: uuid
  created_at: timestamptz
  id: uuid
  order: numeric
  portfolio: Boolean
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type works_stddev_fields {
  order: Float
}

"""
order by stddev() on columns of table "works"
"""
input works_stddev_order_by {
  order: order_by
}

"""aggregate stddev_pop on columns"""
type works_stddev_pop_fields {
  order: Float
}

"""
order by stddev_pop() on columns of table "works"
"""
input works_stddev_pop_order_by {
  order: order_by
}

"""aggregate stddev_samp on columns"""
type works_stddev_samp_fields {
  order: Float
}

"""
order by stddev_samp() on columns of table "works"
"""
input works_stddev_samp_order_by {
  order: order_by
}

"""aggregate sum on columns"""
type works_sum_fields {
  order: numeric
}

"""
order by sum() on columns of table "works"
"""
input works_sum_order_by {
  order: order_by
}

"""
update columns of table "works"
"""
enum works_update_column {
  """column name"""
  application_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  order

  """column name"""
  portfolio

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type works_var_pop_fields {
  order: Float
}

"""
order by var_pop() on columns of table "works"
"""
input works_var_pop_order_by {
  order: order_by
}

"""aggregate var_samp on columns"""
type works_var_samp_fields {
  order: Float
}

"""
order by var_samp() on columns of table "works"
"""
input works_var_samp_order_by {
  order: order_by
}

"""aggregate variance on columns"""
type works_variance_fields {
  order: Float
}

"""
order by variance() on columns of table "works"
"""
input works_variance_order_by {
  order: order_by
}
