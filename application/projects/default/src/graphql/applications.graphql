fragment Payment on payments {
  id
  mimetype
  key
  originalname
  size
  application_id
}

fragment Application on applications {
  id
  name
  group
  created_at
  updated_at
  statement
  residency
  database
  disclaimer
  locked
  ready
  state
  applicant_details
  applicant_details_valid
  payment {
    ...Payment
  }
  edition {
    id
    name
  }
  files_aggregate {
    aggregate {
      count
      sum {
        size
      }
    }
  }
  works_aggregate {
    aggregate {
      count
    }
  }
}
fragment AdminApplication on applications {
  internal_name
  rated_by_user
  winner
  elimination {
    ...Elimination
  }
  files(limit: 1, order_by: { order: asc_nulls_last }) {
    ...WorkFile
  }
}
fragment JuryApplications on applications {
  id
  group
  created_at
  updated_at
  statement
  internal_name
  rated_by_user
  winner
  elimination {
    ...Elimination
  }
  files(limit: 1, order_by: { order: asc_nulls_last }) {
    ...WorkFile
  }
}

fragment Elimination on eliminations {
  application_id
  created_at
  round_id
  eliminated_by {
    name
  }
  rating_round {
    level
  }
  reason
}

# User

query GetApplications {
  applications(order_by: { created_at: asc_nulls_first }) {
    ...Application
  }
  applications_aggregate {
    aggregate {
      count
    }
  }
}
query GetApplication($id: uuid!) {
  applications_by_pk(id: $id) {
    ...Application
  }
}
mutation AddApplication($edition_id: Int!) {
  insert_applications_one(
    object: {
      edition_id: $edition_id
      user: {
        data: {}
        on_conflict: { constraint: users_pkey, update_columns: last_seen }
      }
    }
  ) {
    id
  }
}

mutation UpdateApplication($id: uuid!, $data: applications_set_input!) {
  update_applications_by_pk(pk_columns: { id: $id }, _set: $data) {
    ...Application
  }
}
mutation LockApplication($id: uuid!) {
  update_applications_by_pk(pk_columns: { id: $id }, _set: { locked: true }) {
    id
    locked
  }
}
mutation UnlockApplication($id: uuid!) {
  update_applications_by_pk(pk_columns: { id: $id }, _set: { locked: false }) {
    id
    locked
  }
}
mutation DeleteApplication($id: uuid!) {
  delete_applications_by_pk(id: $id) {
    id
  }
}

mutation AddPayment(
  $application_id: uuid!
  $id: uuid!
  $key: String!
  $mimetype: String!
  $originalname: String!
  $size: numeric!
) {
  update_applications_by_pk(
    pk_columns: { id: $application_id }
    _set: { updated_at: "now()" }
  ) {
    id
    updated_at
  }
  insert_payments_one(
    object: {
      application_id: $application_id
      id: $id
      key: $key
      mimetype: $mimetype
      size: $size
      originalname: $originalname
    }
  ) {
    ...Payment
  }
}
mutation DeletePayment($id: uuid!, $application_id: uuid!) {
  update_applications_by_pk(
    pk_columns: { id: $application_id }
    _set: { updated_at: "now()" }
  ) {
    id
    updated_at
  }
  delete_payments_by_pk(id: $id) {
    id
    application_id
  }
}

# Jury

subscription GetJuryApplications {
  applications_aggregate(
    where: { edition: { current: { _eq: true } }, _not: { elimination: {} } }
    order_by: {
      rating_in_latest_round: { avg: desc_nulls_first, count: desc_nulls_first }
      ratings_aggregate: { stddev_samp: { value: desc_nulls_first } }
    }
  ) {
    aggregate {
      count
    }
    nodes {
      ...JuryApplications
      rating_in_latest_round {
        round_id
        avg
        avg_total
        count
      }
      ratings_aggregate {
        aggregate {
          count
          stddev_samp {
            value
          }
          var_samp {
            value
          }
          avg {
            value
          }
        }
      }
    }
  }
}
query GetJuryApplication($id: uuid!) {
  applications_by_pk(id: $id) {
    ...JuryApplications
  }
}

# Admin
query GetAdminApplicationsByEdition($edition_id: Int = -1) {
  applications(
    where: { edition_id: { _eq: $edition_id } }
    order_by: {
      created_at: asc_nulls_first
      rating_in_latest_round: { avg: desc_nulls_first, count: desc_nulls_first }
      ratings_aggregate: { stddev_samp: { value: desc_nulls_first } }
      elimination: { created_at: asc_nulls_first }
    }
  ) {
    # ...Application
    # ...AdminApplication
    id
    name
    internal_name
    state
    winner
    files(limit: 1, order_by: { order: asc_nulls_last }) {
      ...WorkFile
    }
    elimination {
      ...Elimination
    }
    rating_in_latest_round {
      round_id
      avg
      avg_total
      count
    }
    ratings_aggregate {
      aggregate {
        count
        stddev_samp {
          value
        }
        var_samp {
          value
        }
        avg {
          value
        }
      }
    }
  }
  applications_aggregate {
    aggregate {
      count
    }
  }
}
query GetAdminApplication($id: uuid!) {
  applications_by_pk(id: $id) {
    ...Application
    ...AdminApplication
  }
}
query GetAdminApplicationLive($id: uuid!) {
  applications_by_pk(id: $id) {
    rated_by_user
  }
}
query GetRemainingApplications {
  applications_aggregate(
    where: { edition: { current: { _eq: true } }, _not: { elimination: {} } }
    order_by: {
      rating_in_latest_round: { avg: desc_nulls_first, count: desc_nulls_last }
      ratings_aggregate: { stddev_samp: { value: desc_nulls_last } }
    }
  ) {
    aggregate {
      count
    }
    nodes {
      id
      internal_name
      rating_in_latest_round {
        round_id
        avg
        avg_total
        count
      }
    }
  }
}
mutation CreateNewAlias($id: uuid!) {
  update_applications_by_pk(
    pk_columns: { id: $id }
    _set: { internal_name: null }
  ) {
    id
    updated_at
    internal_name
  }
}

mutation EliminateApplication(
  $application_id: uuid!
  $reason: String!
  $round_id: Int
) {
  insert_eliminations_one(
    object: {
      application_id: $application_id
      reason: $reason
      round_id: $round_id
    }
  ) {
    ...Elimination
  }
}
mutation DeleteElimination($application_id: uuid!) {
  delete_eliminations_by_pk(application_id: $application_id) {
    application_id
  }
}

query SearchApplications($search: String!, $edition_id: Int = -1) {
  search_applications(
    where: { edition_id: { _eq: $edition_id }, _not: { elimination: {} } }
    args: { search: $search }
  ) {
    id
    internal_name
  }
}
